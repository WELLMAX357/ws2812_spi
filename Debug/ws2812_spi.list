
ws2812_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000503c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005234  08005234  00006234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005254  08005254  0000714c  2**0
                  CONTENTS
  4 .ARM          00000008  08005254  08005254  00006254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800525c  0800525c  0000714c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800525c  0800525c  0000625c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005260  08005260  00006260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005264  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08005270  0000700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08005310  000070ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d18  2000014c  080053b0  0000714c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000e64  080053b0  00007e64  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000714c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014b78  00000000  00000000  0000717a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c88  00000000  00000000  0001bcf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fe8  00000000  00000000  0001e980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c44  00000000  00000000  0001f968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029093  00000000  00000000  000205ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013640  00000000  00000000  0004963f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb5bf  00000000  00000000  0005cc7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0015823e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000428c  00000000  00000000  00158284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  0015c510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800521c 	.word	0x0800521c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	0800521c 	.word	0x0800521c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
    HAL_SPI_Transmit_DMA(&WS2812_SPI_HANDLE, ws2812_buffer, WS2812_BUFFER_SIZE);
 8000530:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000534:	4903      	ldr	r1, [pc, #12]	@ (8000544 <HAL_SPI_TxCpltCallback+0x1c>)
 8000536:	4804      	ldr	r0, [pc, #16]	@ (8000548 <HAL_SPI_TxCpltCallback+0x20>)
 8000538:	f003 fb78 	bl	8003c2c <HAL_SPI_Transmit_DMA>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000884 	.word	0x20000884
 8000548:	20000250 	.word	0x20000250

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f000 fe0a 	bl	800116a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f835 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055a:	f000 f9ab 	bl	80008b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800055e:	f000 f98b 	bl	8000878 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000562:	f000 f92b 	bl	80007bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000566:	f000 f959 	bl	800081c <MX_USB_OTG_FS_PCD_Init>
  MX_ETH_Init();
 800056a:	f000 f89b 	bl	80006a4 <MX_ETH_Init>
  MX_SPI2_Init();
 800056e:	f000 f8e7 	bl	8000740 <MX_SPI2_Init>
//  {
//	 setLED(i, 255, 0, 0);
//  }
//  ws2812_send();

  ws2812_init();
 8000572:	f000 fdb7 	bl	80010e4 <ws2812_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i < WS2812_NUM_LEDS; i++) {
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	e01f      	b.n	80005bc <main+0x70>
		  ws2812_pixel(i, 0, 250, 154);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	b298      	uxth	r0, r3
 8000580:	239a      	movs	r3, #154	@ 0x9a
 8000582:	22fa      	movs	r2, #250	@ 0xfa
 8000584:	2100      	movs	r1, #0
 8000586:	f000 fcd3 	bl	8000f30 <ws2812_pixel>
		  if (i == 0) ws2812_pixel(WS2812_NUM_LEDS-1, 0, 0, 0);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d106      	bne.n	800059e <main+0x52>
 8000590:	2300      	movs	r3, #0
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	203b      	movs	r0, #59	@ 0x3b
 8000598:	f000 fcca 	bl	8000f30 <ws2812_pixel>
 800059c:	e008      	b.n	80005b0 <main+0x64>
		  else 		  ws2812_pixel(i-1, 0, 0, 0);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	3b01      	subs	r3, #1
 80005a4:	b298      	uxth	r0, r3
 80005a6:	2300      	movs	r3, #0
 80005a8:	2200      	movs	r2, #0
 80005aa:	2100      	movs	r1, #0
 80005ac:	f000 fcc0 	bl	8000f30 <ws2812_pixel>
//		  ws2812_send_spi();
		  HAL_Delay(10);
 80005b0:	200a      	movs	r0, #10
 80005b2:	f000 fe37 	bl	8001224 <HAL_Delay>
	  for (int i = 0; i < WS2812_NUM_LEDS; i++) {
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3301      	adds	r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b3b      	cmp	r3, #59	@ 0x3b
 80005c0:	dddc      	ble.n	800057c <main+0x30>
 80005c2:	e7d8      	b.n	8000576 <main+0x2a>

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2234      	movs	r2, #52	@ 0x34
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 fdf5 	bl	80051c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e8:	f002 f918 	bl	800281c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <SystemClock_Config+0xd8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	4a2a      	ldr	r2, [pc, #168]	@ (800069c <SystemClock_Config+0xd8>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f8:	4b28      	ldr	r3, [pc, #160]	@ (800069c <SystemClock_Config+0xd8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <SystemClock_Config+0xdc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a25      	ldr	r2, [pc, #148]	@ (80006a0 <SystemClock_Config+0xdc>)
 800060a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <SystemClock_Config+0xdc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000620:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000624:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800062e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000634:	23d8      	movs	r3, #216	@ 0xd8
 8000636:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800063c:	2309      	movs	r3, #9
 800063e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000640:	2302      	movs	r3, #2
 8000642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f947 	bl	80028dc <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f9d0 	bl	80009f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000658:	f002 f8f0 	bl	800283c <HAL_PWREx_EnableOverDrive>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000662:	f000 f9c9 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000672:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	2107      	movs	r1, #7
 8000684:	4618      	mov	r0, r3
 8000686:	f002 fbd7 	bl	8002e38 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000690:	f000 f9b2 	bl	80009f8 <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	@ 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <MX_ETH_Init+0x84>)
 80006aa:	4a20      	ldr	r2, [pc, #128]	@ (800072c <MX_ETH_Init+0x88>)
 80006ac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006ae:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <MX_ETH_Init+0x8c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <MX_ETH_Init+0x8c>)
 80006b6:	2280      	movs	r2, #128	@ 0x80
 80006b8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <MX_ETH_Init+0x8c>)
 80006bc:	22e1      	movs	r2, #225	@ 0xe1
 80006be:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_ETH_Init+0x8c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <MX_ETH_Init+0x8c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_ETH_Init+0x8c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <MX_ETH_Init+0x84>)
 80006d4:	4a16      	ldr	r2, [pc, #88]	@ (8000730 <MX_ETH_Init+0x8c>)
 80006d6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_ETH_Init+0x84>)
 80006da:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006de:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_ETH_Init+0x84>)
 80006e2:	4a14      	ldr	r2, [pc, #80]	@ (8000734 <MX_ETH_Init+0x90>)
 80006e4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_ETH_Init+0x84>)
 80006e8:	4a13      	ldr	r2, [pc, #76]	@ (8000738 <MX_ETH_Init+0x94>)
 80006ea:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_ETH_Init+0x84>)
 80006ee:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006f2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006f4:	480c      	ldr	r0, [pc, #48]	@ (8000728 <MX_ETH_Init+0x84>)
 80006f6:	f001 fa43 	bl	8001b80 <HAL_ETH_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000700:	f000 f97a 	bl	80009f8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000704:	2238      	movs	r2, #56	@ 0x38
 8000706:	2100      	movs	r1, #0
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <MX_ETH_Init+0x98>)
 800070a:	f004 fd5a 	bl	80051c2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800070e:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <MX_ETH_Init+0x98>)
 8000710:	2221      	movs	r2, #33	@ 0x21
 8000712:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000714:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_ETH_Init+0x98>)
 8000716:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800071a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <MX_ETH_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200001a0 	.word	0x200001a0
 800072c:	40028000 	.word	0x40028000
 8000730:	2000087c 	.word	0x2000087c
 8000734:	200000ac 	.word	0x200000ac
 8000738:	2000000c 	.word	0x2000000c
 800073c:	20000168 	.word	0x20000168

08000740 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <MX_SPI2_Init+0x74>)
 8000746:	4a1c      	ldr	r2, [pc, #112]	@ (80007b8 <MX_SPI2_Init+0x78>)
 8000748:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_SPI2_Init+0x74>)
 800074c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000750:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000752:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_SPI2_Init+0x74>)
 8000754:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000758:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800075a:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_SPI2_Init+0x74>)
 800075c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000760:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_SPI2_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_SPI2_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_SPI2_Init+0x74>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_SPI2_Init+0x74>)
 8000778:	2218      	movs	r2, #24
 800077a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <MX_SPI2_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_SPI2_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <MX_SPI2_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_SPI2_Init+0x74>)
 8000790:	2207      	movs	r2, #7
 8000792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <MX_SPI2_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_SPI2_Init+0x74>)
 800079c:	2208      	movs	r2, #8
 800079e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_SPI2_Init+0x74>)
 80007a2:	f003 f997 	bl	8003ad4 <HAL_SPI_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80007ac:	f000 f924 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000250 	.word	0x20000250
 80007b8:	40003800 	.word	0x40003800

080007bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_USART3_UART_Init+0x58>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	@ (8000818 <MX_USART3_UART_Init+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007c6:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <MX_USART3_UART_Init+0x58>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART3_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_USART3_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART3_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART3_UART_Init+0x58>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART3_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART3_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART3_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART3_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_USART3_UART_Init+0x58>)
 8000800:	f003 fd22 	bl	8004248 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 f8f5 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000314 	.word	0x20000314
 8000818:	40004800 	.word	0x40004800

0800081c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000826:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	2206      	movs	r2, #6
 800082c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000830:	2202      	movs	r2, #2
 8000832:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083c:	2202      	movs	r2, #2
 800083e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000842:	2201      	movs	r2, #1
 8000844:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000854:	2201      	movs	r2, #1
 8000856:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000860:	f001 fea1 	bl	80025a6 <HAL_PCD_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800086a:	f000 f8c5 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000039c 	.word	0x2000039c

08000878 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087e:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_DMA_Init+0x38>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a0b      	ldr	r2, [pc, #44]	@ (80008b0 <MX_DMA_Init+0x38>)
 8000884:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_DMA_Init+0x38>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	200f      	movs	r0, #15
 800089c:	f000 fdc1 	bl	8001422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80008a0:	200f      	movs	r0, #15
 80008a2:	f000 fdda 	bl	800145a <HAL_NVIC_EnableIRQ>

}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	@ 0x30
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b47      	ldr	r3, [pc, #284]	@ (80009e8 <MX_GPIO_Init+0x134>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a46      	ldr	r2, [pc, #280]	@ (80009e8 <MX_GPIO_Init+0x134>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b44      	ldr	r3, [pc, #272]	@ (80009e8 <MX_GPIO_Init+0x134>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	4b41      	ldr	r3, [pc, #260]	@ (80009e8 <MX_GPIO_Init+0x134>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a40      	ldr	r2, [pc, #256]	@ (80009e8 <MX_GPIO_Init+0x134>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b3e      	ldr	r3, [pc, #248]	@ (80009e8 <MX_GPIO_Init+0x134>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b3b      	ldr	r3, [pc, #236]	@ (80009e8 <MX_GPIO_Init+0x134>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a3a      	ldr	r2, [pc, #232]	@ (80009e8 <MX_GPIO_Init+0x134>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b38      	ldr	r3, [pc, #224]	@ (80009e8 <MX_GPIO_Init+0x134>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	4b35      	ldr	r3, [pc, #212]	@ (80009e8 <MX_GPIO_Init+0x134>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a34      	ldr	r2, [pc, #208]	@ (80009e8 <MX_GPIO_Init+0x134>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b32      	ldr	r3, [pc, #200]	@ (80009e8 <MX_GPIO_Init+0x134>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	4b2f      	ldr	r3, [pc, #188]	@ (80009e8 <MX_GPIO_Init+0x134>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a2e      	ldr	r2, [pc, #184]	@ (80009e8 <MX_GPIO_Init+0x134>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b2c      	ldr	r3, [pc, #176]	@ (80009e8 <MX_GPIO_Init+0x134>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000942:	4b29      	ldr	r3, [pc, #164]	@ (80009e8 <MX_GPIO_Init+0x134>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a28      	ldr	r2, [pc, #160]	@ (80009e8 <MX_GPIO_Init+0x134>)
 8000948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b26      	ldr	r3, [pc, #152]	@ (80009e8 <MX_GPIO_Init+0x134>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000960:	4822      	ldr	r0, [pc, #136]	@ (80009ec <MX_GPIO_Init+0x138>)
 8000962:	f001 fe07 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2140      	movs	r1, #64	@ 0x40
 800096a:	4821      	ldr	r0, [pc, #132]	@ (80009f0 <MX_GPIO_Init+0x13c>)
 800096c:	f001 fe02 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000976:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	481b      	ldr	r0, [pc, #108]	@ (80009f4 <MX_GPIO_Init+0x140>)
 8000988:	f001 fc48 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800098c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4811      	ldr	r0, [pc, #68]	@ (80009ec <MX_GPIO_Init+0x138>)
 80009a6:	f001 fc39 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009aa:	2340      	movs	r3, #64	@ 0x40
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	480b      	ldr	r0, [pc, #44]	@ (80009f0 <MX_GPIO_Init+0x13c>)
 80009c2:	f001 fc2b 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009c6:	2380      	movs	r3, #128	@ 0x80
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_GPIO_Init+0x13c>)
 80009da:	f001 fc1f 	bl	800221c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009de:	bf00      	nop
 80009e0:	3730      	adds	r7, #48	@ 0x30
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020400 	.word	0x40020400
 80009f0:	40021800 	.word	0x40021800
 80009f4:	40020800 	.word	0x40020800

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <Error_Handler+0x8>

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <HAL_MspInit+0x44>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a48 <HAL_MspInit+0x44>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a16:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <HAL_MspInit+0x44>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <HAL_MspInit+0x44>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	4a08      	ldr	r2, [pc, #32]	@ (8000a48 <HAL_MspInit+0x44>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_MspInit+0x44>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	@ 0x38
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a4e      	ldr	r2, [pc, #312]	@ (8000ba4 <HAL_ETH_MspInit+0x158>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	f040 8096 	bne.w	8000b9c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a70:	4b4d      	ldr	r3, [pc, #308]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	4a4c      	ldr	r2, [pc, #304]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000a76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7c:	4b4a      	ldr	r3, [pc, #296]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a84:	623b      	str	r3, [r7, #32]
 8000a86:	6a3b      	ldr	r3, [r7, #32]
 8000a88:	4b47      	ldr	r3, [pc, #284]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	4a46      	ldr	r2, [pc, #280]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000a8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a94:	4b44      	ldr	r3, [pc, #272]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a9c:	61fb      	str	r3, [r7, #28]
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	4b41      	ldr	r3, [pc, #260]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa4:	4a40      	ldr	r2, [pc, #256]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000aa6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000aaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aac:	4b3e      	ldr	r3, [pc, #248]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ab4:	61bb      	str	r3, [r7, #24]
 8000ab6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	4a3a      	ldr	r2, [pc, #232]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac4:	4b38      	ldr	r3, [pc, #224]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b35      	ldr	r3, [pc, #212]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad4:	4a34      	ldr	r2, [pc, #208]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6313      	str	r3, [r2, #48]	@ 0x30
 8000adc:	4b32      	ldr	r3, [pc, #200]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aec:	4a2e      	ldr	r2, [pc, #184]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b00:	4b29      	ldr	r3, [pc, #164]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b04:	4a28      	ldr	r2, [pc, #160]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0c:	4b26      	ldr	r3, [pc, #152]	@ (8000ba8 <HAL_ETH_MspInit+0x15c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b18:	2332      	movs	r3, #50	@ 0x32
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b28:	230b      	movs	r3, #11
 8000b2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	481e      	ldr	r0, [pc, #120]	@ (8000bac <HAL_ETH_MspInit+0x160>)
 8000b34:	f001 fb72 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b38:	2386      	movs	r3, #134	@ 0x86
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b48:	230b      	movs	r3, #11
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	4817      	ldr	r0, [pc, #92]	@ (8000bb0 <HAL_ETH_MspInit+0x164>)
 8000b54:	f001 fb62 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6a:	230b      	movs	r3, #11
 8000b6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	480f      	ldr	r0, [pc, #60]	@ (8000bb4 <HAL_ETH_MspInit+0x168>)
 8000b76:	f001 fb51 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b7a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8c:	230b      	movs	r3, #11
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	4808      	ldr	r0, [pc, #32]	@ (8000bb8 <HAL_ETH_MspInit+0x16c>)
 8000b98:	f001 fb40 	bl	800221c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3738      	adds	r7, #56	@ 0x38
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40028000 	.word	0x40028000
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020800 	.word	0x40020800
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	40021800 	.word	0x40021800

08000bbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	@ 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8000ccc <HAL_SPI_MspInit+0x110>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d171      	bne.n	8000cc2 <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bde:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd0 <HAL_SPI_MspInit+0x114>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	4a3b      	ldr	r2, [pc, #236]	@ (8000cd0 <HAL_SPI_MspInit+0x114>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bea:	4b39      	ldr	r3, [pc, #228]	@ (8000cd0 <HAL_SPI_MspInit+0x114>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b36      	ldr	r3, [pc, #216]	@ (8000cd0 <HAL_SPI_MspInit+0x114>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a35      	ldr	r2, [pc, #212]	@ (8000cd0 <HAL_SPI_MspInit+0x114>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b33      	ldr	r3, [pc, #204]	@ (8000cd0 <HAL_SPI_MspInit+0x114>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <HAL_SPI_MspInit+0x114>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a2f      	ldr	r2, [pc, #188]	@ (8000cd0 <HAL_SPI_MspInit+0x114>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <HAL_SPI_MspInit+0x114>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c26:	2308      	movs	r3, #8
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c36:	2305      	movs	r3, #5
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4824      	ldr	r0, [pc, #144]	@ (8000cd4 <HAL_SPI_MspInit+0x118>)
 8000c42:	f001 faeb 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c58:	2305      	movs	r3, #5
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	481d      	ldr	r0, [pc, #116]	@ (8000cd8 <HAL_SPI_MspInit+0x11c>)
 8000c64:	f001 fada 	bl	800221c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <HAL_SPI_MspInit+0x120>)
 8000c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce0 <HAL_SPI_MspInit+0x124>)
 8000c6c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <HAL_SPI_MspInit+0x120>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c74:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <HAL_SPI_MspInit+0x120>)
 8000c76:	2240      	movs	r2, #64	@ 0x40
 8000c78:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <HAL_SPI_MspInit+0x120>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c80:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <HAL_SPI_MspInit+0x120>)
 8000c82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c86:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <HAL_SPI_MspInit+0x120>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <HAL_SPI_MspInit+0x120>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <HAL_SPI_MspInit+0x120>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <HAL_SPI_MspInit+0x120>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <HAL_SPI_MspInit+0x120>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ca6:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <HAL_SPI_MspInit+0x120>)
 8000ca8:	f000 fbf2 	bl	8001490 <HAL_DMA_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8000cb2:	f7ff fea1 	bl	80009f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a08      	ldr	r2, [pc, #32]	@ (8000cdc <HAL_SPI_MspInit+0x120>)
 8000cba:	655a      	str	r2, [r3, #84]	@ 0x54
 8000cbc:	4a07      	ldr	r2, [pc, #28]	@ (8000cdc <HAL_SPI_MspInit+0x120>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	@ 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40003800 	.word	0x40003800
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020800 	.word	0x40020800
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	200002b4 	.word	0x200002b4
 8000ce0:	40026070 	.word	0x40026070

08000ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0ae      	sub	sp, #184	@ 0xb8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2290      	movs	r2, #144	@ 0x90
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fa5c 	bl	80051c2 <memset>
  if(huart->Instance==USART3)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a22      	ldr	r2, [pc, #136]	@ (8000d98 <HAL_UART_MspInit+0xb4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d13c      	bne.n	8000d8e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d18:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 faae 	bl	8003284 <HAL_RCCEx_PeriphCLKConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d2e:	f7ff fe63 	bl	80009f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <HAL_UART_MspInit+0xb8>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a19      	ldr	r2, [pc, #100]	@ (8000d9c <HAL_UART_MspInit+0xb8>)
 8000d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <HAL_UART_MspInit+0xb8>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <HAL_UART_MspInit+0xb8>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a13      	ldr	r2, [pc, #76]	@ (8000d9c <HAL_UART_MspInit+0xb8>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <HAL_UART_MspInit+0xb8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d82:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <HAL_UART_MspInit+0xbc>)
 8000d8a:	f001 fa47 	bl	800221c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	37b8      	adds	r7, #184	@ 0xb8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40004800 	.word	0x40004800
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020c00 	.word	0x40020c00

08000da4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0ae      	sub	sp, #184	@ 0xb8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2290      	movs	r2, #144	@ 0x90
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f004 f9fc 	bl	80051c2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dd2:	d159      	bne.n	8000e88 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000dd4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000dd8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fa4d 	bl	8003284 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000df0:	f7ff fe02 	bl	80009f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df8:	4a25      	ldr	r2, [pc, #148]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e00:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e0c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e26:	230a      	movs	r3, #10
 8000e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e30:	4619      	mov	r1, r3
 8000e32:	4818      	ldr	r0, [pc, #96]	@ (8000e94 <HAL_PCD_MspInit+0xf0>)
 8000e34:	f001 f9f2 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4810      	ldr	r0, [pc, #64]	@ (8000e94 <HAL_PCD_MspInit+0xf0>)
 8000e54:	f001 f9e2 	bl	800221c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e62:	6353      	str	r3, [r2, #52]	@ 0x34
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e74:	4a06      	ldr	r2, [pc, #24]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000e76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7c:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	37b8      	adds	r7, #184	@ 0xb8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <NMI_Handler+0x4>

08000ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <MemManage_Handler+0x4>

08000eb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eee:	f000 f979 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <DMA1_Stream4_IRQHandler+0x10>)
 8000efe:	f000 fbd5 	bl	80016ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200002b4 	.word	0x200002b4

08000f0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <ws2812_pixel>:
        } else { \
            *ptr++ = 0b100; \
        } \
    }

void ws2812_pixel(uint16_t led_no, uint8_t r, uint8_t g, uint8_t b) {
 8000f30:	b490      	push	{r4, r7}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4604      	mov	r4, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4623      	mov	r3, r4
 8000f40:	80fb      	strh	r3, [r7, #6]
 8000f42:	4603      	mov	r3, r0
 8000f44:	717b      	strb	r3, [r7, #5]
 8000f46:	460b      	mov	r3, r1
 8000f48:	713b      	strb	r3, [r7, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	70fb      	strb	r3, [r7, #3]
    uint8_t * ptr = &ws2812_buffer[24 * led_no];
 8000f4e:	88fa      	ldrh	r2, [r7, #6]
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001008 <ws2812_pixel+0xd8>)
 8000f5c:	4413      	add	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
    WS2812_FILL_BUFFER(g);
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	72fb      	strb	r3, [r7, #11]
 8000f64:	e013      	b.n	8000f8e <ws2812_pixel+0x5e>
 8000f66:	793a      	ldrb	r2, [r7, #4]
 8000f68:	7afb      	ldrb	r3, [r7, #11]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d005      	beq.n	8000f7e <ws2812_pixel+0x4e>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	60fa      	str	r2, [r7, #12]
 8000f78:	2206      	movs	r2, #6
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	e004      	b.n	8000f88 <ws2812_pixel+0x58>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	60fa      	str	r2, [r7, #12]
 8000f84:	2204      	movs	r2, #4
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	7afb      	ldrb	r3, [r7, #11]
 8000f8a:	085b      	lsrs	r3, r3, #1
 8000f8c:	72fb      	strb	r3, [r7, #11]
 8000f8e:	7afb      	ldrb	r3, [r7, #11]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1e8      	bne.n	8000f66 <ws2812_pixel+0x36>
    WS2812_FILL_BUFFER(r);
 8000f94:	2380      	movs	r3, #128	@ 0x80
 8000f96:	72bb      	strb	r3, [r7, #10]
 8000f98:	e013      	b.n	8000fc2 <ws2812_pixel+0x92>
 8000f9a:	797a      	ldrb	r2, [r7, #5]
 8000f9c:	7abb      	ldrb	r3, [r7, #10]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d005      	beq.n	8000fb2 <ws2812_pixel+0x82>
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	60fa      	str	r2, [r7, #12]
 8000fac:	2206      	movs	r2, #6
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	e004      	b.n	8000fbc <ws2812_pixel+0x8c>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	60fa      	str	r2, [r7, #12]
 8000fb8:	2204      	movs	r2, #4
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	7abb      	ldrb	r3, [r7, #10]
 8000fbe:	085b      	lsrs	r3, r3, #1
 8000fc0:	72bb      	strb	r3, [r7, #10]
 8000fc2:	7abb      	ldrb	r3, [r7, #10]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1e8      	bne.n	8000f9a <ws2812_pixel+0x6a>
    WS2812_FILL_BUFFER(b);
 8000fc8:	2380      	movs	r3, #128	@ 0x80
 8000fca:	727b      	strb	r3, [r7, #9]
 8000fcc:	e013      	b.n	8000ff6 <ws2812_pixel+0xc6>
 8000fce:	78fa      	ldrb	r2, [r7, #3]
 8000fd0:	7a7b      	ldrb	r3, [r7, #9]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <ws2812_pixel+0xb6>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	60fa      	str	r2, [r7, #12]
 8000fe0:	2206      	movs	r2, #6
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	e004      	b.n	8000ff0 <ws2812_pixel+0xc0>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	60fa      	str	r2, [r7, #12]
 8000fec:	2204      	movs	r2, #4
 8000fee:	701a      	strb	r2, [r3, #0]
 8000ff0:	7a7b      	ldrb	r3, [r7, #9]
 8000ff2:	085b      	lsrs	r3, r3, #1
 8000ff4:	727b      	strb	r3, [r7, #9]
 8000ff6:	7a7b      	ldrb	r3, [r7, #9]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1e8      	bne.n	8000fce <ws2812_pixel+0x9e>
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bc90      	pop	{r4, r7}
 8001006:	4770      	bx	lr
 8001008:	20000884 	.word	0x20000884

0800100c <ws2812_pixel_all>:

void ws2812_pixel_all(uint8_t r, uint8_t g, uint8_t b) {
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	460b      	mov	r3, r1
 8001018:	71bb      	strb	r3, [r7, #6]
 800101a:	4613      	mov	r3, r2
 800101c:	717b      	strb	r3, [r7, #5]
    uint8_t * ptr = ws2812_buffer;
 800101e:	4b30      	ldr	r3, [pc, #192]	@ (80010e0 <ws2812_pixel_all+0xd4>)
 8001020:	617b      	str	r3, [r7, #20]
    for(uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) {
 8001022:	2300      	movs	r3, #0
 8001024:	827b      	strh	r3, [r7, #18]
 8001026:	e050      	b.n	80010ca <ws2812_pixel_all+0xbe>
        WS2812_FILL_BUFFER(g);
 8001028:	2380      	movs	r3, #128	@ 0x80
 800102a:	747b      	strb	r3, [r7, #17]
 800102c:	e013      	b.n	8001056 <ws2812_pixel_all+0x4a>
 800102e:	79ba      	ldrb	r2, [r7, #6]
 8001030:	7c7b      	ldrb	r3, [r7, #17]
 8001032:	4013      	ands	r3, r2
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <ws2812_pixel_all+0x3a>
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	617a      	str	r2, [r7, #20]
 8001040:	2206      	movs	r2, #6
 8001042:	701a      	strb	r2, [r3, #0]
 8001044:	e004      	b.n	8001050 <ws2812_pixel_all+0x44>
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	617a      	str	r2, [r7, #20]
 800104c:	2204      	movs	r2, #4
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	7c7b      	ldrb	r3, [r7, #17]
 8001052:	085b      	lsrs	r3, r3, #1
 8001054:	747b      	strb	r3, [r7, #17]
 8001056:	7c7b      	ldrb	r3, [r7, #17]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1e8      	bne.n	800102e <ws2812_pixel_all+0x22>
        WS2812_FILL_BUFFER(r);
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	743b      	strb	r3, [r7, #16]
 8001060:	e013      	b.n	800108a <ws2812_pixel_all+0x7e>
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	7c3b      	ldrb	r3, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <ws2812_pixel_all+0x6e>
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	617a      	str	r2, [r7, #20]
 8001074:	2206      	movs	r2, #6
 8001076:	701a      	strb	r2, [r3, #0]
 8001078:	e004      	b.n	8001084 <ws2812_pixel_all+0x78>
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	617a      	str	r2, [r7, #20]
 8001080:	2204      	movs	r2, #4
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	7c3b      	ldrb	r3, [r7, #16]
 8001086:	085b      	lsrs	r3, r3, #1
 8001088:	743b      	strb	r3, [r7, #16]
 800108a:	7c3b      	ldrb	r3, [r7, #16]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1e8      	bne.n	8001062 <ws2812_pixel_all+0x56>
        WS2812_FILL_BUFFER(b);
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e013      	b.n	80010be <ws2812_pixel_all+0xb2>
 8001096:	797a      	ldrb	r2, [r7, #5]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	4013      	ands	r3, r2
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <ws2812_pixel_all+0xa2>
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	617a      	str	r2, [r7, #20]
 80010a8:	2206      	movs	r2, #6
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	e004      	b.n	80010b8 <ws2812_pixel_all+0xac>
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	617a      	str	r2, [r7, #20]
 80010b4:	2204      	movs	r2, #4
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	085b      	lsrs	r3, r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1e8      	bne.n	8001096 <ws2812_pixel_all+0x8a>
    for(uint16_t i = 0; i < WS2812_NUM_LEDS; ++i) {
 80010c4:	8a7b      	ldrh	r3, [r7, #18]
 80010c6:	3301      	adds	r3, #1
 80010c8:	827b      	strh	r3, [r7, #18]
 80010ca:	8a7b      	ldrh	r3, [r7, #18]
 80010cc:	2b3b      	cmp	r3, #59	@ 0x3b
 80010ce:	d9ab      	bls.n	8001028 <ws2812_pixel_all+0x1c>
    }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000884 	.word	0x20000884

080010e4 <ws2812_init>:

void ws2812_init(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
    memset(ws2812_buffer, 0, WS2812_BUFFER_SIZE);
 80010e8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80010ec:	2100      	movs	r1, #0
 80010ee:	4808      	ldr	r0, [pc, #32]	@ (8001110 <ws2812_init+0x2c>)
 80010f0:	f004 f867 	bl	80051c2 <memset>
    ws2812_pixel_all(0, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff ff87 	bl	800100c <ws2812_pixel_all>
//    ws2812_send_spi();
    HAL_SPI_Transmit_DMA(&WS2812_SPI_HANDLE, ws2812_buffer, WS2812_BUFFER_SIZE);
 80010fe:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001102:	4903      	ldr	r1, [pc, #12]	@ (8001110 <ws2812_init+0x2c>)
 8001104:	4803      	ldr	r0, [pc, #12]	@ (8001114 <ws2812_init+0x30>)
 8001106:	f002 fd91 	bl	8003c2c <HAL_SPI_Transmit_DMA>
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000884 	.word	0x20000884
 8001114:	20000250 	.word	0x20000250

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001150 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800111c:	f7ff fef6 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001122:	490d      	ldr	r1, [pc, #52]	@ (8001158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001124:	4a0d      	ldr	r2, [pc, #52]	@ (800115c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001138:	4c0a      	ldr	r4, [pc, #40]	@ (8001164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001146:	f004 f845 	bl	80051d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff f9ff 	bl	800054c <main>
  bx  lr    
 800114e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800115c:	08005264 	.word	0x08005264
  ldr r2, =_sbss
 8001160:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001164:	20000e64 	.word	0x20000e64

08001168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC_IRQHandler>

0800116a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116e:	2003      	movs	r0, #3
 8001170:	f000 f94c 	bl	800140c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001174:	2000      	movs	r0, #0
 8001176:	f000 f805 	bl	8001184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117a:	f7ff fc43 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <HAL_InitTick+0x54>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <HAL_InitTick+0x58>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119a:	fbb3 f3f1 	udiv	r3, r3, r1
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f967 	bl	8001476 <HAL_SYSTICK_Config>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00e      	b.n	80011d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b0f      	cmp	r3, #15
 80011b6:	d80a      	bhi.n	80011ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b8:	2200      	movs	r2, #0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011c0:	f000 f92f 	bl	8001422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c4:	4a06      	ldr	r2, [pc, #24]	@ (80011e0 <HAL_InitTick+0x5c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000004 	.word	0x20000004

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	20000e60 	.word	0x20000e60

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000e60 	.word	0x20000e60

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff ffee 	bl	800120c <HAL_GetTick>
 8001230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800123c:	d005      	beq.n	800124a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <HAL_Delay+0x44>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800124a:	bf00      	nop
 800124c:	f7ff ffde 	bl	800120c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	d8f7      	bhi.n	800124c <HAL_Delay+0x28>
  {
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008

0800126c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <__NVIC_SetPriorityGrouping+0x40>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	4313      	orrs	r3, r2
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <__NVIC_SetPriorityGrouping+0x40>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00
 80012b0:	05fa0000 	.word	0x05fa0000

080012b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b8:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <__NVIC_GetPriorityGrouping+0x18>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f003 0307 	and.w	r3, r3, #7
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db0b      	blt.n	80012fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 021f 	and.w	r2, r3, #31
 80012e8:	4907      	ldr	r1, [pc, #28]	@ (8001308 <__NVIC_EnableIRQ+0x38>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	095b      	lsrs	r3, r3, #5
 80012f0:	2001      	movs	r0, #1
 80012f2:	fa00 f202 	lsl.w	r2, r0, r2
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000e100 	.word	0xe000e100

0800130c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	db0a      	blt.n	8001336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	490c      	ldr	r1, [pc, #48]	@ (8001358 <__NVIC_SetPriority+0x4c>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	0112      	lsls	r2, r2, #4
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	440b      	add	r3, r1
 8001330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001334:	e00a      	b.n	800134c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4908      	ldr	r1, [pc, #32]	@ (800135c <__NVIC_SetPriority+0x50>)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	3b04      	subs	r3, #4
 8001344:	0112      	lsls	r2, r2, #4
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	440b      	add	r3, r1
 800134a:	761a      	strb	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	@ 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f1c3 0307 	rsb	r3, r3, #7
 800137a:	2b04      	cmp	r3, #4
 800137c:	bf28      	it	cs
 800137e:	2304      	movcs	r3, #4
 8001380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3304      	adds	r3, #4
 8001386:	2b06      	cmp	r3, #6
 8001388:	d902      	bls.n	8001390 <NVIC_EncodePriority+0x30>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3b03      	subs	r3, #3
 800138e:	e000      	b.n	8001392 <NVIC_EncodePriority+0x32>
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43da      	mvns	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	401a      	ands	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	43d9      	mvns	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	4313      	orrs	r3, r2
         );
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3724      	adds	r7, #36	@ 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013ec:	f7ff ff8e 	bl	800130c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff29 	bl	800126c <__NVIC_SetPriorityGrouping>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001434:	f7ff ff3e 	bl	80012b4 <__NVIC_GetPriorityGrouping>
 8001438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff ff8e 	bl	8001360 <NVIC_EncodePriority>
 8001444:	4602      	mov	r2, r0
 8001446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff5d 	bl	800130c <__NVIC_SetPriority>
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff31 	bl	80012d0 <__NVIC_EnableIRQ>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ffa2 	bl	80013c8 <SysTick_Config>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff feb6 	bl	800120c <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e099      	b.n	80015e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2202      	movs	r2, #2
 80014b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014cc:	e00f      	b.n	80014ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ce:	f7ff fe9d 	bl	800120c <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d908      	bls.n	80014ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2220      	movs	r2, #32
 80014e0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2203      	movs	r2, #3
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e078      	b.n	80015e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e8      	bne.n	80014ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	4b38      	ldr	r3, [pc, #224]	@ (80015e8 <HAL_DMA_Init+0x158>)
 8001508:	4013      	ands	r3, r2
 800150a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800151a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4313      	orrs	r3, r2
 800153e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001544:	2b04      	cmp	r3, #4
 8001546:	d107      	bne.n	8001558 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	4313      	orrs	r3, r2
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4313      	orrs	r3, r2
 8001556:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f023 0307 	bic.w	r3, r3, #7
 800156e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	4313      	orrs	r3, r2
 8001578:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157e:	2b04      	cmp	r3, #4
 8001580:	d117      	bne.n	80015b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4313      	orrs	r3, r2
 800158a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00e      	beq.n	80015b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fa77 	bl	8001a88 <DMA_CheckFifoParam>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2240      	movs	r2, #64	@ 0x40
 80015a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80015ae:	2301      	movs	r3, #1
 80015b0:	e016      	b.n	80015e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 fa2e 	bl	8001a1c <DMA_CalcBaseAndBitshift>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c8:	223f      	movs	r2, #63	@ 0x3f
 80015ca:	409a      	lsls	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	e010803f 	.word	0xe010803f

080015ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001602:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_DMA_Start_IT+0x26>
 800160e:	2302      	movs	r3, #2
 8001610:	e048      	b.n	80016a4 <HAL_DMA_Start_IT+0xb8>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b01      	cmp	r3, #1
 8001624:	d137      	bne.n	8001696 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2202      	movs	r2, #2
 800162a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 f9c0 	bl	80019c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001644:	223f      	movs	r2, #63	@ 0x3f
 8001646:	409a      	lsls	r2, r3
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0216 	orr.w	r2, r2, #22
 800165a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800166a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0208 	orr.w	r2, r2, #8
 8001682:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e005      	b.n	80016a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800169e:	2302      	movs	r3, #2
 80016a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80016b8:	4b8e      	ldr	r3, [pc, #568]	@ (80018f4 <HAL_DMA_IRQHandler+0x248>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a8e      	ldr	r2, [pc, #568]	@ (80018f8 <HAL_DMA_IRQHandler+0x24c>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	0a9b      	lsrs	r3, r3, #10
 80016c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	2208      	movs	r2, #8
 80016d8:	409a      	lsls	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4013      	ands	r3, r2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d01a      	beq.n	8001718 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0204 	bic.w	r2, r2, #4
 80016fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001704:	2208      	movs	r2, #8
 8001706:	409a      	lsls	r2, r3
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001710:	f043 0201 	orr.w	r2, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800171c:	2201      	movs	r2, #1
 800171e:	409a      	lsls	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d012      	beq.n	800174e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00b      	beq.n	800174e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173a:	2201      	movs	r2, #1
 800173c:	409a      	lsls	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001746:	f043 0202 	orr.w	r2, r3, #2
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001752:	2204      	movs	r2, #4
 8001754:	409a      	lsls	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4013      	ands	r3, r2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d012      	beq.n	8001784 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00b      	beq.n	8001784 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001770:	2204      	movs	r2, #4
 8001772:	409a      	lsls	r2, r3
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800177c:	f043 0204 	orr.w	r2, r3, #4
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001788:	2210      	movs	r2, #16
 800178a:	409a      	lsls	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d043      	beq.n	800181c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d03c      	beq.n	800181c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a6:	2210      	movs	r2, #16
 80017a8:	409a      	lsls	r2, r3
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d018      	beq.n	80017ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d108      	bne.n	80017dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d024      	beq.n	800181c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	4798      	blx	r3
 80017da:	e01f      	b.n	800181c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d01b      	beq.n	800181c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	4798      	blx	r3
 80017ec:	e016      	b.n	800181c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d107      	bne.n	800180c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0208 	bic.w	r2, r2, #8
 800180a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001820:	2220      	movs	r2, #32
 8001822:	409a      	lsls	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 808f 	beq.w	800194c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8087 	beq.w	800194c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001842:	2220      	movs	r2, #32
 8001844:	409a      	lsls	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b05      	cmp	r3, #5
 8001854:	d136      	bne.n	80018c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0216 	bic.w	r2, r2, #22
 8001864:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	695a      	ldr	r2, [r3, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001874:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	2b00      	cmp	r3, #0
 800187c:	d103      	bne.n	8001886 <HAL_DMA_IRQHandler+0x1da>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0208 	bic.w	r2, r2, #8
 8001894:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800189a:	223f      	movs	r2, #63	@ 0x3f
 800189c:	409a      	lsls	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d07e      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	4798      	blx	r3
        }
        return;
 80018c2:	e079      	b.n	80019b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01d      	beq.n	800190e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10d      	bne.n	80018fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d031      	beq.n	800194c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	4798      	blx	r3
 80018f0:	e02c      	b.n	800194c <HAL_DMA_IRQHandler+0x2a0>
 80018f2:	bf00      	nop
 80018f4:	20000000 	.word	0x20000000
 80018f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001900:	2b00      	cmp	r3, #0
 8001902:	d023      	beq.n	800194c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	4798      	blx	r3
 800190c:	e01e      	b.n	800194c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10f      	bne.n	800193c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0210 	bic.w	r2, r2, #16
 800192a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001950:	2b00      	cmp	r3, #0
 8001952:	d032      	beq.n	80019ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d022      	beq.n	80019a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2205      	movs	r2, #5
 8001964:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	3301      	adds	r3, #1
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	429a      	cmp	r2, r3
 8001982:	d307      	bcc.n	8001994 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f2      	bne.n	8001978 <HAL_DMA_IRQHandler+0x2cc>
 8001992:	e000      	b.n	8001996 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001994:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	4798      	blx	r3
 80019b6:	e000      	b.n	80019ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80019b8:	bf00      	nop
    }
  }
}
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80019dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b40      	cmp	r3, #64	@ 0x40
 80019ec:	d108      	bne.n	8001a00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019fe:	e007      	b.n	8001a10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	60da      	str	r2, [r3, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	3b10      	subs	r3, #16
 8001a2c:	4a13      	ldr	r2, [pc, #76]	@ (8001a7c <DMA_CalcBaseAndBitshift+0x60>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a36:	4a12      	ldr	r2, [pc, #72]	@ (8001a80 <DMA_CalcBaseAndBitshift+0x64>)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d908      	bls.n	8001a5c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <DMA_CalcBaseAndBitshift+0x68>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	1d1a      	adds	r2, r3, #4
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a5a:	e006      	b.n	8001a6a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <DMA_CalcBaseAndBitshift+0x68>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	aaaaaaab 	.word	0xaaaaaaab
 8001a80:	0800524c 	.word	0x0800524c
 8001a84:	fffffc00 	.word	0xfffffc00

08001a88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d11f      	bne.n	8001ae2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d856      	bhi.n	8001b56 <DMA_CheckFifoParam+0xce>
 8001aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab0 <DMA_CheckFifoParam+0x28>)
 8001aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aae:	bf00      	nop
 8001ab0:	08001ac1 	.word	0x08001ac1
 8001ab4:	08001ad3 	.word	0x08001ad3
 8001ab8:	08001ac1 	.word	0x08001ac1
 8001abc:	08001b57 	.word	0x08001b57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d046      	beq.n	8001b5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ad0:	e043      	b.n	8001b5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ada:	d140      	bne.n	8001b5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ae0:	e03d      	b.n	8001b5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aea:	d121      	bne.n	8001b30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d837      	bhi.n	8001b62 <DMA_CheckFifoParam+0xda>
 8001af2:	a201      	add	r2, pc, #4	@ (adr r2, 8001af8 <DMA_CheckFifoParam+0x70>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b09 	.word	0x08001b09
 8001afc:	08001b0f 	.word	0x08001b0f
 8001b00:	08001b09 	.word	0x08001b09
 8001b04:	08001b21 	.word	0x08001b21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b0c:	e030      	b.n	8001b70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d025      	beq.n	8001b66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b1e:	e022      	b.n	8001b66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b28:	d11f      	bne.n	8001b6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b2e:	e01c      	b.n	8001b6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d903      	bls.n	8001b3e <DMA_CheckFifoParam+0xb6>
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d003      	beq.n	8001b44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b3c:	e018      	b.n	8001b70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
      break;
 8001b42:	e015      	b.n	8001b70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00e      	beq.n	8001b6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
      break;
 8001b54:	e00b      	b.n	8001b6e <DMA_CheckFifoParam+0xe6>
      break;
 8001b56:	bf00      	nop
 8001b58:	e00a      	b.n	8001b70 <DMA_CheckFifoParam+0xe8>
      break;
 8001b5a:	bf00      	nop
 8001b5c:	e008      	b.n	8001b70 <DMA_CheckFifoParam+0xe8>
      break;
 8001b5e:	bf00      	nop
 8001b60:	e006      	b.n	8001b70 <DMA_CheckFifoParam+0xe8>
      break;
 8001b62:	bf00      	nop
 8001b64:	e004      	b.n	8001b70 <DMA_CheckFifoParam+0xe8>
      break;
 8001b66:	bf00      	nop
 8001b68:	e002      	b.n	8001b70 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b6a:	bf00      	nop
 8001b6c:	e000      	b.n	8001b70 <DMA_CheckFifoParam+0xe8>
      break;
 8001b6e:	bf00      	nop
    }
  } 
  
  return status; 
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop

08001b80 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e086      	b.n	8001ca0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d106      	bne.n	8001baa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2223      	movs	r2, #35	@ 0x23
 8001ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7fe ff51 	bl	8000a4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca8 <HAL_ETH_Init+0x128>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	4a3e      	ldr	r2, [pc, #248]	@ (8001ca8 <HAL_ETH_Init+0x128>)
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca8 <HAL_ETH_Init+0x128>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8001cac <HAL_ETH_Init+0x12c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4a39      	ldr	r2, [pc, #228]	@ (8001cac <HAL_ETH_Init+0x12c>)
 8001bc8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001bcc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001bce:	4b37      	ldr	r3, [pc, #220]	@ (8001cac <HAL_ETH_Init+0x12c>)
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4935      	ldr	r1, [pc, #212]	@ (8001cac <HAL_ETH_Init+0x12c>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001bdc:	4b33      	ldr	r3, [pc, #204]	@ (8001cac <HAL_ETH_Init+0x12c>)
 8001bde:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bf6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf8:	f7ff fb08 	bl	800120c <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bfe:	e011      	b.n	8001c24 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c00:	f7ff fb04 	bl	800120c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c0e:	d909      	bls.n	8001c24 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2204      	movs	r2, #4
 8001c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	22e0      	movs	r2, #224	@ 0xe0
 8001c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e03d      	b.n	8001ca0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1e4      	bne.n	8001c00 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f97a 	bl	8001f30 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fa25 	bl	800208c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 fa7b 	bl	800213e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	2100      	movs	r1, #0
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f9e3 	bl	800201c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001c64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <HAL_ETH_Init+0x130>)
 8001c74:	430b      	orrs	r3, r1
 8001c76:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001c8a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2210      	movs	r2, #16
 8001c9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40013800 	.word	0x40013800
 8001cb0:	00020060 	.word	0x00020060

08001cb4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4b53      	ldr	r3, [pc, #332]	@ (8001e18 <ETH_SetMACConfig+0x164>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	7b9b      	ldrb	r3, [r3, #14]
 8001cd2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	7c12      	ldrb	r2, [r2, #16]
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	d102      	bne.n	8001ce2 <ETH_SetMACConfig+0x2e>
 8001cdc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ce0:	e000      	b.n	8001ce4 <ETH_SetMACConfig+0x30>
 8001ce2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ce4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	7c52      	ldrb	r2, [r2, #17]
 8001cea:	2a00      	cmp	r2, #0
 8001cec:	d102      	bne.n	8001cf4 <ETH_SetMACConfig+0x40>
 8001cee:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001cf2:	e000      	b.n	8001cf6 <ETH_SetMACConfig+0x42>
 8001cf4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cf6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cfc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	7fdb      	ldrb	r3, [r3, #31]
 8001d02:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d04:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	7f92      	ldrb	r2, [r2, #30]
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	d102      	bne.n	8001d1a <ETH_SetMACConfig+0x66>
 8001d14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d18:	e000      	b.n	8001d1c <ETH_SetMACConfig+0x68>
 8001d1a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	7f1b      	ldrb	r3, [r3, #28]
 8001d22:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d24:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d2a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	791b      	ldrb	r3, [r3, #4]
 8001d30:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d3a:	2a00      	cmp	r2, #0
 8001d3c:	d102      	bne.n	8001d44 <ETH_SetMACConfig+0x90>
 8001d3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d42:	e000      	b.n	8001d46 <ETH_SetMACConfig+0x92>
 8001d44:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d46:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	7bdb      	ldrb	r3, [r3, #15]
 8001d4c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d4e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d54:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d5c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f7ff fa54 	bl	8001224 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d92:	4013      	ands	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d9a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001da2:	2a00      	cmp	r2, #0
 8001da4:	d101      	bne.n	8001daa <ETH_SetMACConfig+0xf6>
 8001da6:	2280      	movs	r2, #128	@ 0x80
 8001da8:	e000      	b.n	8001dac <ETH_SetMACConfig+0xf8>
 8001daa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001dac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001db2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001dba:	2a01      	cmp	r2, #1
 8001dbc:	d101      	bne.n	8001dc2 <ETH_SetMACConfig+0x10e>
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	e000      	b.n	8001dc4 <ETH_SetMACConfig+0x110>
 8001dc2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001dc4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001dcc:	2a01      	cmp	r2, #1
 8001dce:	d101      	bne.n	8001dd4 <ETH_SetMACConfig+0x120>
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	e000      	b.n	8001dd6 <ETH_SetMACConfig+0x122>
 8001dd4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001dd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001dde:	2a01      	cmp	r2, #1
 8001de0:	d101      	bne.n	8001de6 <ETH_SetMACConfig+0x132>
 8001de2:	2202      	movs	r2, #2
 8001de4:	e000      	b.n	8001de8 <ETH_SetMACConfig+0x134>
 8001de6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001de8:	4313      	orrs	r3, r2
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e00:	2001      	movs	r0, #1
 8001e02:	f7ff fa0f 	bl	8001224 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	619a      	str	r2, [r3, #24]
}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	fd20810f 	.word	0xfd20810f

08001e1c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4b3d      	ldr	r3, [pc, #244]	@ (8001f2c <ETH_SetDMAConfig+0x110>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	7b1b      	ldrb	r3, [r3, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <ETH_SetDMAConfig+0x2c>
 8001e42:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e46:	e000      	b.n	8001e4a <ETH_SetDMAConfig+0x2e>
 8001e48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	7b5b      	ldrb	r3, [r3, #13]
 8001e4e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e50:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	7f52      	ldrb	r2, [r2, #29]
 8001e56:	2a00      	cmp	r2, #0
 8001e58:	d102      	bne.n	8001e60 <ETH_SetDMAConfig+0x44>
 8001e5a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e5e:	e000      	b.n	8001e62 <ETH_SetDMAConfig+0x46>
 8001e60:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e62:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	7b9b      	ldrb	r3, [r3, #14]
 8001e68:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e6a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e70:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	7f1b      	ldrb	r3, [r3, #28]
 8001e76:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e78:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	7f9b      	ldrb	r3, [r3, #30]
 8001e7e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e80:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e86:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e8e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e90:	4313      	orrs	r3, r2
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f7ff f9b6 	bl	8001224 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	791b      	ldrb	r3, [r3, #4]
 8001eca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ed0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ed6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001edc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ee4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ee6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001eee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ef4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001efe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f02:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f10:	2001      	movs	r0, #1
 8001f12:	f7ff f987 	bl	8001224 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	f8de3f23 	.word	0xf8de3f23

08001f30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b0a6      	sub	sp, #152	@ 0x98
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f44:	2300      	movs	r3, #0
 8001f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f60:	2301      	movs	r3, #1
 8001f62:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f72:	2300      	movs	r3, #0
 8001f74:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001faa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001fae:	4619      	mov	r1, r3
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff fe7f 	bl	8001cb4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fe6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ff0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ff2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ff6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002006:	f107 0308 	add.w	r3, r7, #8
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff05 	bl	8001e1c <ETH_SetDMAConfig>
}
 8002012:	bf00      	nop
 8002014:	3798      	adds	r7, #152	@ 0x98
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800201c:	b480      	push	{r7}
 800201e:	b087      	sub	sp, #28
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3305      	adds	r3, #5
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	3204      	adds	r2, #4
 8002034:	7812      	ldrb	r2, [r2, #0]
 8002036:	4313      	orrs	r3, r2
 8002038:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <ETH_MACAddressConfig+0x68>)
 800203e:	4413      	add	r3, r2
 8002040:	461a      	mov	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3303      	adds	r3, #3
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	061a      	lsls	r2, r3, #24
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3302      	adds	r3, #2
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	041b      	lsls	r3, r3, #16
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3301      	adds	r3, #1
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	4313      	orrs	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	7812      	ldrb	r2, [r2, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <ETH_MACAddressConfig+0x6c>)
 800206e:	4413      	add	r3, r2
 8002070:	461a      	mov	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	6013      	str	r3, [r2, #0]
}
 8002076:	bf00      	nop
 8002078:	371c      	adds	r7, #28
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40028040 	.word	0x40028040
 8002088:	40028044 	.word	0x40028044

0800208c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	e03e      	b.n	8002118 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68d9      	ldr	r1, [r3, #12]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	440b      	add	r3, r1
 80020aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	3206      	adds	r2, #6
 80020cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d80c      	bhi.n	80020fc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68d9      	ldr	r1, [r3, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	e004      	b.n	8002106 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	461a      	mov	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	3301      	adds	r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d9bd      	bls.n	800209a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002130:	611a      	str	r2, [r3, #16]
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800213e:	b480      	push	{r7}
 8002140:	b085      	sub	sp, #20
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	e048      	b.n	80021de <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6919      	ldr	r1, [r3, #16]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	440b      	add	r3, r1
 800215c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2200      	movs	r2, #0
 8002180:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002188:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	3212      	adds	r2, #18
 80021aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d80c      	bhi.n	80021ce <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6919      	ldr	r1, [r3, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	461a      	mov	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60da      	str	r2, [r3, #12]
 80021cc:	e004      	b.n	80021d8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3301      	adds	r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d9b3      	bls.n	800214c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800220e:	60da      	str	r2, [r3, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	@ 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e175      	b.n	8002528 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	f040 8164 	bne.w	8002522 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d005      	beq.n	8002272 <HAL_GPIO_Init+0x56>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d130      	bne.n	80022d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 0201 	and.w	r2, r3, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d017      	beq.n	8002310 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d123      	bne.n	8002364 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	69b9      	ldr	r1, [r7, #24]
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0203 	and.w	r2, r3, #3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80be 	beq.w	8002522 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	4b66      	ldr	r3, [pc, #408]	@ (8002540 <HAL_GPIO_Init+0x324>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	4a65      	ldr	r2, [pc, #404]	@ (8002540 <HAL_GPIO_Init+0x324>)
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b2:	4b63      	ldr	r3, [pc, #396]	@ (8002540 <HAL_GPIO_Init+0x324>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023be:	4a61      	ldr	r2, [pc, #388]	@ (8002544 <HAL_GPIO_Init+0x328>)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	220f      	movs	r2, #15
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a58      	ldr	r2, [pc, #352]	@ (8002548 <HAL_GPIO_Init+0x32c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d037      	beq.n	800245a <HAL_GPIO_Init+0x23e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a57      	ldr	r2, [pc, #348]	@ (800254c <HAL_GPIO_Init+0x330>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d031      	beq.n	8002456 <HAL_GPIO_Init+0x23a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a56      	ldr	r2, [pc, #344]	@ (8002550 <HAL_GPIO_Init+0x334>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d02b      	beq.n	8002452 <HAL_GPIO_Init+0x236>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a55      	ldr	r2, [pc, #340]	@ (8002554 <HAL_GPIO_Init+0x338>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d025      	beq.n	800244e <HAL_GPIO_Init+0x232>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a54      	ldr	r2, [pc, #336]	@ (8002558 <HAL_GPIO_Init+0x33c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01f      	beq.n	800244a <HAL_GPIO_Init+0x22e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a53      	ldr	r2, [pc, #332]	@ (800255c <HAL_GPIO_Init+0x340>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d019      	beq.n	8002446 <HAL_GPIO_Init+0x22a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a52      	ldr	r2, [pc, #328]	@ (8002560 <HAL_GPIO_Init+0x344>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_GPIO_Init+0x226>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a51      	ldr	r2, [pc, #324]	@ (8002564 <HAL_GPIO_Init+0x348>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00d      	beq.n	800243e <HAL_GPIO_Init+0x222>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a50      	ldr	r2, [pc, #320]	@ (8002568 <HAL_GPIO_Init+0x34c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d007      	beq.n	800243a <HAL_GPIO_Init+0x21e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4f      	ldr	r2, [pc, #316]	@ (800256c <HAL_GPIO_Init+0x350>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_GPIO_Init+0x21a>
 8002432:	2309      	movs	r3, #9
 8002434:	e012      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002436:	230a      	movs	r3, #10
 8002438:	e010      	b.n	800245c <HAL_GPIO_Init+0x240>
 800243a:	2308      	movs	r3, #8
 800243c:	e00e      	b.n	800245c <HAL_GPIO_Init+0x240>
 800243e:	2307      	movs	r3, #7
 8002440:	e00c      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002442:	2306      	movs	r3, #6
 8002444:	e00a      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002446:	2305      	movs	r3, #5
 8002448:	e008      	b.n	800245c <HAL_GPIO_Init+0x240>
 800244a:	2304      	movs	r3, #4
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x240>
 800244e:	2303      	movs	r3, #3
 8002450:	e004      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002452:	2302      	movs	r3, #2
 8002454:	e002      	b.n	800245c <HAL_GPIO_Init+0x240>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x240>
 800245a:	2300      	movs	r3, #0
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	f002 0203 	and.w	r2, r2, #3
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	4093      	lsls	r3, r2
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800246c:	4935      	ldr	r1, [pc, #212]	@ (8002544 <HAL_GPIO_Init+0x328>)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800247a:	4b3d      	ldr	r3, [pc, #244]	@ (8002570 <HAL_GPIO_Init+0x354>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800249e:	4a34      	ldr	r2, [pc, #208]	@ (8002570 <HAL_GPIO_Init+0x354>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a4:	4b32      	ldr	r3, [pc, #200]	@ (8002570 <HAL_GPIO_Init+0x354>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c8:	4a29      	ldr	r2, [pc, #164]	@ (8002570 <HAL_GPIO_Init+0x354>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ce:	4b28      	ldr	r3, [pc, #160]	@ (8002570 <HAL_GPIO_Init+0x354>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002570 <HAL_GPIO_Init+0x354>)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <HAL_GPIO_Init+0x354>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800251c:	4a14      	ldr	r2, [pc, #80]	@ (8002570 <HAL_GPIO_Init+0x354>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3301      	adds	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	f67f ae86 	bls.w	800223c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3724      	adds	r7, #36	@ 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	40013800 	.word	0x40013800
 8002548:	40020000 	.word	0x40020000
 800254c:	40020400 	.word	0x40020400
 8002550:	40020800 	.word	0x40020800
 8002554:	40020c00 	.word	0x40020c00
 8002558:	40021000 	.word	0x40021000
 800255c:	40021400 	.word	0x40021400
 8002560:	40021800 	.word	0x40021800
 8002564:	40021c00 	.word	0x40021c00
 8002568:	40022000 	.word	0x40022000
 800256c:	40022400 	.word	0x40022400
 8002570:	40013c00 	.word	0x40013c00

08002574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
 8002580:	4613      	mov	r3, r2
 8002582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002584:	787b      	ldrb	r3, [r7, #1]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258a:	887a      	ldrh	r2, [r7, #2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002590:	e003      	b.n	800259a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	041a      	lsls	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	619a      	str	r2, [r3, #24]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af02      	add	r7, sp, #8
 80025ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e108      	b.n	80027ca <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe fbe6 	bl	8000da4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2203      	movs	r2, #3
 80025dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025e6:	d102      	bne.n	80025ee <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f002 fb50 	bl	8004c98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7c1a      	ldrb	r2, [r3, #16]
 8002600:	f88d 2000 	strb.w	r2, [sp]
 8002604:	3304      	adds	r3, #4
 8002606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002608:	f002 faec 	bl	8004be4 <USB_CoreInit>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2202      	movs	r2, #2
 8002616:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0d5      	b.n	80027ca <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f002 fb48 	bl	8004cba <USB_SetCurrentMode>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0c6      	b.n	80027ca <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263c:	2300      	movs	r3, #0
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	e04a      	b.n	80026d8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	3315      	adds	r3, #21
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	3314      	adds	r3, #20
 8002666:	7bfa      	ldrb	r2, [r7, #15]
 8002668:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	b298      	uxth	r0, r3
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	332e      	adds	r3, #46	@ 0x2e
 800267e:	4602      	mov	r2, r0
 8002680:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	3318      	adds	r3, #24
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	331c      	adds	r3, #28
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	3320      	adds	r3, #32
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	3324      	adds	r3, #36	@ 0x24
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	3301      	adds	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	791b      	ldrb	r3, [r3, #4]
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d3af      	bcc.n	8002642 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	73fb      	strb	r3, [r7, #15]
 80026e6:	e044      	b.n	8002772 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002710:	7bfa      	ldrb	r2, [r7, #15]
 8002712:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	3301      	adds	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	791b      	ldrb	r3, [r3, #4]
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	429a      	cmp	r2, r3
 800277a:	d3b5      	bcc.n	80026e8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7c1a      	ldrb	r2, [r3, #16]
 8002784:	f88d 2000 	strb.w	r2, [sp]
 8002788:	3304      	adds	r3, #4
 800278a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800278c:	f002 fae2 	bl	8004d54 <USB_DevInit>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e013      	b.n	80027ca <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7b1b      	ldrb	r3, [r3, #12]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d102      	bne.n	80027be <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f80b 	bl	80027d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 fc9d 	bl	8005102 <USB_DevDisconnect>

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002802:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_PCDEx_ActivateLPM+0x44>)
 8002804:	4313      	orrs	r3, r2
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	10000003 	.word	0x10000003

0800281c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a04      	ldr	r2, [pc, #16]	@ (8002838 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800282a:	6013      	str	r3, [r2, #0]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40007000 	.word	0x40007000

0800283c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	4b23      	ldr	r3, [pc, #140]	@ (80028d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	4a22      	ldr	r2, [pc, #136]	@ (80028d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	@ 0x40
 8002852:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800285e:	4b1e      	ldr	r3, [pc, #120]	@ (80028d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1d      	ldr	r2, [pc, #116]	@ (80028d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002868:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800286a:	f7fe fccf 	bl	800120c <HAL_GetTick>
 800286e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002870:	e009      	b.n	8002886 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002872:	f7fe fccb 	bl	800120c <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002880:	d901      	bls.n	8002886 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e022      	b.n	80028cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002886:	4b14      	ldr	r3, [pc, #80]	@ (80028d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800288e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002892:	d1ee      	bne.n	8002872 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002894:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0f      	ldr	r2, [pc, #60]	@ (80028d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800289e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028a0:	f7fe fcb4 	bl	800120c <HAL_GetTick>
 80028a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028a6:	e009      	b.n	80028bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028a8:	f7fe fcb0 	bl	800120c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028b6:	d901      	bls.n	80028bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e007      	b.n	80028cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028bc:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028c8:	d1ee      	bne.n	80028a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40007000 	.word	0x40007000

080028dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028e4:	2300      	movs	r3, #0
 80028e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e29b      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8087 	beq.w	8002a0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002900:	4b96      	ldr	r3, [pc, #600]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b04      	cmp	r3, #4
 800290a:	d00c      	beq.n	8002926 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290c:	4b93      	ldr	r3, [pc, #588]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b08      	cmp	r3, #8
 8002916:	d112      	bne.n	800293e <HAL_RCC_OscConfig+0x62>
 8002918:	4b90      	ldr	r3, [pc, #576]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002920:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002924:	d10b      	bne.n	800293e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002926:	4b8d      	ldr	r3, [pc, #564]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d06c      	beq.n	8002a0c <HAL_RCC_OscConfig+0x130>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d168      	bne.n	8002a0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e275      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x7a>
 8002948:	4b84      	ldr	r3, [pc, #528]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a83      	ldr	r2, [pc, #524]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 800294e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	e02e      	b.n	80029b4 <HAL_RCC_OscConfig+0xd8>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x9c>
 800295e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a7e      	ldr	r2, [pc, #504]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a7b      	ldr	r2, [pc, #492]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002970:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e01d      	b.n	80029b4 <HAL_RCC_OscConfig+0xd8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0xc0>
 8002982:	4b76      	ldr	r3, [pc, #472]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a75      	ldr	r2, [pc, #468]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4b73      	ldr	r3, [pc, #460]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a72      	ldr	r2, [pc, #456]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e00b      	b.n	80029b4 <HAL_RCC_OscConfig+0xd8>
 800299c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a6e      	ldr	r2, [pc, #440]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 80029a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	4b6c      	ldr	r3, [pc, #432]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a6b      	ldr	r2, [pc, #428]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 80029ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d013      	beq.n	80029e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe fc26 	bl	800120c <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c4:	f7fe fc22 	bl	800120c <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	@ 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e229      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	4b61      	ldr	r3, [pc, #388]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0xe8>
 80029e2:	e014      	b.n	8002a0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe fc12 	bl	800120c <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ec:	f7fe fc0e 	bl	800120c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	@ 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e215      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fe:	4b57      	ldr	r3, [pc, #348]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x110>
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d069      	beq.n	8002aee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a1a:	4b50      	ldr	r3, [pc, #320]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a26:	4b4d      	ldr	r3, [pc, #308]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d11c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x190>
 8002a32:	4b4a      	ldr	r3, [pc, #296]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d116      	bne.n	8002a6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3e:	4b47      	ldr	r3, [pc, #284]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_RCC_OscConfig+0x17a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d001      	beq.n	8002a56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e1e9      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a56:	4b41      	ldr	r3, [pc, #260]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	493d      	ldr	r1, [pc, #244]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6a:	e040      	b.n	8002aee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d023      	beq.n	8002abc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a74:	4b39      	ldr	r3, [pc, #228]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a38      	ldr	r2, [pc, #224]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe fbc4 	bl	800120c <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a88:	f7fe fbc0 	bl	800120c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e1c7      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9a:	4b30      	ldr	r3, [pc, #192]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4929      	ldr	r1, [pc, #164]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]
 8002aba:	e018      	b.n	8002aee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002abc:	4b27      	ldr	r3, [pc, #156]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a26      	ldr	r2, [pc, #152]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
 8002ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fba0 	bl	800120c <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad0:	f7fe fb9c 	bl	800120c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e1a3      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d038      	beq.n	8002b6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d019      	beq.n	8002b36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b02:	4b16      	ldr	r3, [pc, #88]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b06:	4a15      	ldr	r2, [pc, #84]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fb7d 	bl	800120c <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b16:	f7fe fb79 	bl	800120c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e180      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x23a>
 8002b34:	e01a      	b.n	8002b6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b36:	4b09      	ldr	r3, [pc, #36]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b3a:	4a08      	ldr	r2, [pc, #32]	@ (8002b5c <HAL_RCC_OscConfig+0x280>)
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7fe fb63 	bl	800120c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7fe fb5f 	bl	800120c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d903      	bls.n	8002b60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e166      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
 8002b5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	4b92      	ldr	r3, [pc, #584]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ee      	bne.n	8002b4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80a4 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7a:	4b8c      	ldr	r3, [pc, #560]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10d      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	4b89      	ldr	r3, [pc, #548]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	4a88      	ldr	r2, [pc, #544]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b92:	4b86      	ldr	r3, [pc, #536]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba2:	4b83      	ldr	r3, [pc, #524]	@ (8002db0 <HAL_RCC_OscConfig+0x4d4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d118      	bne.n	8002be0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bae:	4b80      	ldr	r3, [pc, #512]	@ (8002db0 <HAL_RCC_OscConfig+0x4d4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7f      	ldr	r2, [pc, #508]	@ (8002db0 <HAL_RCC_OscConfig+0x4d4>)
 8002bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bba:	f7fe fb27 	bl	800120c <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc2:	f7fe fb23 	bl	800120c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b64      	cmp	r3, #100	@ 0x64
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e12a      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd4:	4b76      	ldr	r3, [pc, #472]	@ (8002db0 <HAL_RCC_OscConfig+0x4d4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d106      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x31a>
 8002be8:	4b70      	ldr	r3, [pc, #448]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bec:	4a6f      	ldr	r2, [pc, #444]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf4:	e02d      	b.n	8002c52 <HAL_RCC_OscConfig+0x376>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x33c>
 8002bfe:	4b6b      	ldr	r3, [pc, #428]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c02:	4a6a      	ldr	r2, [pc, #424]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c0a:	4b68      	ldr	r3, [pc, #416]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0e:	4a67      	ldr	r2, [pc, #412]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002c10:	f023 0304 	bic.w	r3, r3, #4
 8002c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c16:	e01c      	b.n	8002c52 <HAL_RCC_OscConfig+0x376>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b05      	cmp	r3, #5
 8002c1e:	d10c      	bne.n	8002c3a <HAL_RCC_OscConfig+0x35e>
 8002c20:	4b62      	ldr	r3, [pc, #392]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c24:	4a61      	ldr	r2, [pc, #388]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002c26:	f043 0304 	orr.w	r3, r3, #4
 8002c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c2c:	4b5f      	ldr	r3, [pc, #380]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c30:	4a5e      	ldr	r2, [pc, #376]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c38:	e00b      	b.n	8002c52 <HAL_RCC_OscConfig+0x376>
 8002c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c46:	4b59      	ldr	r3, [pc, #356]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4a:	4a58      	ldr	r2, [pc, #352]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002c4c:	f023 0304 	bic.w	r3, r3, #4
 8002c50:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d015      	beq.n	8002c86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fad7 	bl	800120c <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7fe fad3 	bl	800120c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e0d8      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c78:	4b4c      	ldr	r3, [pc, #304]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ee      	beq.n	8002c62 <HAL_RCC_OscConfig+0x386>
 8002c84:	e014      	b.n	8002cb0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c86:	f7fe fac1 	bl	800120c <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7fe fabd 	bl	800120c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e0c2      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca4:	4b41      	ldr	r3, [pc, #260]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1ee      	bne.n	8002c8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d105      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb6:	4b3d      	ldr	r3, [pc, #244]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	4a3c      	ldr	r2, [pc, #240]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002cbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cc0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80ae 	beq.w	8002e28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ccc:	4b37      	ldr	r3, [pc, #220]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d06d      	beq.n	8002db4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d14b      	bne.n	8002d78 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce0:	4b32      	ldr	r3, [pc, #200]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a31      	ldr	r2, [pc, #196]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002ce6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe fa8e 	bl	800120c <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe fa8a 	bl	800120c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e091      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	4b29      	ldr	r3, [pc, #164]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	019b      	lsls	r3, r3, #6
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3c:	071b      	lsls	r3, r3, #28
 8002d3e:	491b      	ldr	r1, [pc, #108]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d44:	4b19      	ldr	r3, [pc, #100]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a18      	ldr	r2, [pc, #96]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002d4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fa5c 	bl	800120c <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d58:	f7fe fa58 	bl	800120c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e05f      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	4b10      	ldr	r3, [pc, #64]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x47c>
 8002d76:	e057      	b.n	8002e28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d78:	4b0c      	ldr	r3, [pc, #48]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002d7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe fa42 	bl	800120c <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fe fa3e 	bl	800120c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e045      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9e:	4b03      	ldr	r3, [pc, #12]	@ (8002dac <HAL_RCC_OscConfig+0x4d0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4b0>
 8002daa:	e03d      	b.n	8002e28 <HAL_RCC_OscConfig+0x54c>
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002db4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e34 <HAL_RCC_OscConfig+0x558>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d030      	beq.n	8002e24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d129      	bne.n	8002e24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d122      	bne.n	8002e24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002de4:	4013      	ands	r3, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d119      	bne.n	8002e24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d10f      	bne.n	8002e24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800

08002e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0d0      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e50:	4b6a      	ldr	r3, [pc, #424]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d910      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b67      	ldr	r3, [pc, #412]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 020f 	bic.w	r2, r3, #15
 8002e66:	4965      	ldr	r1, [pc, #404]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b63      	ldr	r3, [pc, #396]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0b8      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d020      	beq.n	8002ece <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e98:	4b59      	ldr	r3, [pc, #356]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	4a58      	ldr	r2, [pc, #352]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ea2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb0:	4b53      	ldr	r3, [pc, #332]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4a52      	ldr	r2, [pc, #328]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002eba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b50      	ldr	r3, [pc, #320]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	494d      	ldr	r1, [pc, #308]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d040      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b47      	ldr	r3, [pc, #284]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d115      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e07f      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b41      	ldr	r3, [pc, #260]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e073      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e06b      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1a:	4b39      	ldr	r3, [pc, #228]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4936      	ldr	r1, [pc, #216]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2c:	f7fe f96e 	bl	800120c <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f34:	f7fe f96a 	bl	800120c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e053      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 020c 	and.w	r2, r3, #12
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1eb      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b27      	ldr	r3, [pc, #156]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d210      	bcs.n	8002f8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b24      	ldr	r3, [pc, #144]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 020f 	bic.w	r2, r3, #15
 8002f72:	4922      	ldr	r1, [pc, #136]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b20      	ldr	r3, [pc, #128]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e032      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f98:	4b19      	ldr	r3, [pc, #100]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4916      	ldr	r1, [pc, #88]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fb6:	4b12      	ldr	r3, [pc, #72]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	490e      	ldr	r1, [pc, #56]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fca:	f000 f821 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	490a      	ldr	r1, [pc, #40]	@ (8003004 <HAL_RCC_ClockConfig+0x1cc>)
 8002fdc:	5ccb      	ldrb	r3, [r1, r3]
 8002fde:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe2:	4a09      	ldr	r2, [pc, #36]	@ (8003008 <HAL_RCC_ClockConfig+0x1d0>)
 8002fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fe6:	4b09      	ldr	r3, [pc, #36]	@ (800300c <HAL_RCC_ClockConfig+0x1d4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe f8ca 	bl	8001184 <HAL_InitTick>

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023c00 	.word	0x40023c00
 8003000:	40023800 	.word	0x40023800
 8003004:	08005234 	.word	0x08005234
 8003008:	20000000 	.word	0x20000000
 800300c:	20000004 	.word	0x20000004

08003010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003014:	b094      	sub	sp, #80	@ 0x50
 8003016:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	647b      	str	r3, [r7, #68]	@ 0x44
 800301c:	2300      	movs	r3, #0
 800301e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003020:	2300      	movs	r3, #0
 8003022:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003028:	4b79      	ldr	r3, [pc, #484]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x200>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 030c 	and.w	r3, r3, #12
 8003030:	2b08      	cmp	r3, #8
 8003032:	d00d      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x40>
 8003034:	2b08      	cmp	r3, #8
 8003036:	f200 80e1 	bhi.w	80031fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x34>
 800303e:	2b04      	cmp	r3, #4
 8003040:	d003      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0x3a>
 8003042:	e0db      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003044:	4b73      	ldr	r3, [pc, #460]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x204>)
 8003046:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003048:	e0db      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800304a:	4b73      	ldr	r3, [pc, #460]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x208>)
 800304c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800304e:	e0d8      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003050:	4b6f      	ldr	r3, [pc, #444]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x200>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003058:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800305a:	4b6d      	ldr	r3, [pc, #436]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x200>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d063      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003066:	4b6a      	ldr	r3, [pc, #424]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x200>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	2200      	movs	r2, #0
 800306e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003070:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003078:	633b      	str	r3, [r7, #48]	@ 0x30
 800307a:	2300      	movs	r3, #0
 800307c:	637b      	str	r3, [r7, #52]	@ 0x34
 800307e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003082:	4622      	mov	r2, r4
 8003084:	462b      	mov	r3, r5
 8003086:	f04f 0000 	mov.w	r0, #0
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	0159      	lsls	r1, r3, #5
 8003090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003094:	0150      	lsls	r0, r2, #5
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4621      	mov	r1, r4
 800309c:	1a51      	subs	r1, r2, r1
 800309e:	6139      	str	r1, [r7, #16]
 80030a0:	4629      	mov	r1, r5
 80030a2:	eb63 0301 	sbc.w	r3, r3, r1
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030b4:	4659      	mov	r1, fp
 80030b6:	018b      	lsls	r3, r1, #6
 80030b8:	4651      	mov	r1, sl
 80030ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030be:	4651      	mov	r1, sl
 80030c0:	018a      	lsls	r2, r1, #6
 80030c2:	4651      	mov	r1, sl
 80030c4:	ebb2 0801 	subs.w	r8, r2, r1
 80030c8:	4659      	mov	r1, fp
 80030ca:	eb63 0901 	sbc.w	r9, r3, r1
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030e2:	4690      	mov	r8, r2
 80030e4:	4699      	mov	r9, r3
 80030e6:	4623      	mov	r3, r4
 80030e8:	eb18 0303 	adds.w	r3, r8, r3
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	462b      	mov	r3, r5
 80030f0:	eb49 0303 	adc.w	r3, r9, r3
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003102:	4629      	mov	r1, r5
 8003104:	024b      	lsls	r3, r1, #9
 8003106:	4621      	mov	r1, r4
 8003108:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800310c:	4621      	mov	r1, r4
 800310e:	024a      	lsls	r2, r1, #9
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003116:	2200      	movs	r2, #0
 8003118:	62bb      	str	r3, [r7, #40]	@ 0x28
 800311a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800311c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003120:	f7fd f88a 	bl	8000238 <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4613      	mov	r3, r2
 800312a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800312c:	e058      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312e:	4b38      	ldr	r3, [pc, #224]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x200>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	099b      	lsrs	r3, r3, #6
 8003134:	2200      	movs	r2, #0
 8003136:	4618      	mov	r0, r3
 8003138:	4611      	mov	r1, r2
 800313a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800313e:	623b      	str	r3, [r7, #32]
 8003140:	2300      	movs	r3, #0
 8003142:	627b      	str	r3, [r7, #36]	@ 0x24
 8003144:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003148:	4642      	mov	r2, r8
 800314a:	464b      	mov	r3, r9
 800314c:	f04f 0000 	mov.w	r0, #0
 8003150:	f04f 0100 	mov.w	r1, #0
 8003154:	0159      	lsls	r1, r3, #5
 8003156:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800315a:	0150      	lsls	r0, r2, #5
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4641      	mov	r1, r8
 8003162:	ebb2 0a01 	subs.w	sl, r2, r1
 8003166:	4649      	mov	r1, r9
 8003168:	eb63 0b01 	sbc.w	fp, r3, r1
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003178:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800317c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003180:	ebb2 040a 	subs.w	r4, r2, sl
 8003184:	eb63 050b 	sbc.w	r5, r3, fp
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	00eb      	lsls	r3, r5, #3
 8003192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003196:	00e2      	lsls	r2, r4, #3
 8003198:	4614      	mov	r4, r2
 800319a:	461d      	mov	r5, r3
 800319c:	4643      	mov	r3, r8
 800319e:	18e3      	adds	r3, r4, r3
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	464b      	mov	r3, r9
 80031a4:	eb45 0303 	adc.w	r3, r5, r3
 80031a8:	607b      	str	r3, [r7, #4]
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031b6:	4629      	mov	r1, r5
 80031b8:	028b      	lsls	r3, r1, #10
 80031ba:	4621      	mov	r1, r4
 80031bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031c0:	4621      	mov	r1, r4
 80031c2:	028a      	lsls	r2, r1, #10
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ca:	2200      	movs	r2, #0
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	61fa      	str	r2, [r7, #28]
 80031d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031d4:	f7fd f830 	bl	8000238 <__aeabi_uldivmod>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4613      	mov	r3, r2
 80031de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	3301      	adds	r3, #1
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80031f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031fa:	e002      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b05      	ldr	r3, [pc, #20]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x204>)
 80031fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003204:	4618      	mov	r0, r3
 8003206:	3750      	adds	r7, #80	@ 0x50
 8003208:	46bd      	mov	sp, r7
 800320a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800320e:	bf00      	nop
 8003210:	40023800 	.word	0x40023800
 8003214:	00f42400 	.word	0x00f42400
 8003218:	007a1200 	.word	0x007a1200

0800321c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003220:	4b03      	ldr	r3, [pc, #12]	@ (8003230 <HAL_RCC_GetHCLKFreq+0x14>)
 8003222:	681b      	ldr	r3, [r3, #0]
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000000 	.word	0x20000000

08003234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003238:	f7ff fff0 	bl	800321c <HAL_RCC_GetHCLKFreq>
 800323c:	4602      	mov	r2, r0
 800323e:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	0a9b      	lsrs	r3, r3, #10
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	4903      	ldr	r1, [pc, #12]	@ (8003258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800324a:	5ccb      	ldrb	r3, [r1, r3]
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003250:	4618      	mov	r0, r3
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40023800 	.word	0x40023800
 8003258:	08005244 	.word	0x08005244

0800325c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003260:	f7ff ffdc 	bl	800321c <HAL_RCC_GetHCLKFreq>
 8003264:	4602      	mov	r2, r0
 8003266:	4b05      	ldr	r3, [pc, #20]	@ (800327c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	0b5b      	lsrs	r3, r3, #13
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	4903      	ldr	r1, [pc, #12]	@ (8003280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003272:	5ccb      	ldrb	r3, [r1, r3]
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003278:	4618      	mov	r0, r3
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40023800 	.word	0x40023800
 8003280:	08005244 	.word	0x08005244

08003284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d012      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032ac:	4b69      	ldr	r3, [pc, #420]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a68      	ldr	r2, [pc, #416]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80032b6:	6093      	str	r3, [r2, #8]
 80032b8:	4b66      	ldr	r3, [pc, #408]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c0:	4964      	ldr	r1, [pc, #400]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032ce:	2301      	movs	r3, #1
 80032d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d017      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032de:	4b5d      	ldr	r3, [pc, #372]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ec:	4959      	ldr	r1, [pc, #356]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032fc:	d101      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80032fe:	2301      	movs	r3, #1
 8003300:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800330a:	2301      	movs	r3, #1
 800330c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d017      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800331a:	4b4e      	ldr	r3, [pc, #312]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003320:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003328:	494a      	ldr	r1, [pc, #296]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003338:	d101      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800333a:	2301      	movs	r3, #1
 800333c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003346:	2301      	movs	r3, #1
 8003348:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003356:	2301      	movs	r3, #1
 8003358:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 808b 	beq.w	800347e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003368:	4b3a      	ldr	r3, [pc, #232]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	4a39      	ldr	r2, [pc, #228]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003372:	6413      	str	r3, [r2, #64]	@ 0x40
 8003374:	4b37      	ldr	r3, [pc, #220]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003380:	4b35      	ldr	r3, [pc, #212]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a34      	ldr	r2, [pc, #208]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800338a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800338c:	f7fd ff3e 	bl	800120c <HAL_GetTick>
 8003390:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003394:	f7fd ff3a 	bl	800120c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	@ 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e38f      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033b2:	4b28      	ldr	r3, [pc, #160]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d035      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d02e      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d0:	4b20      	ldr	r3, [pc, #128]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033da:	4b1e      	ldr	r3, [pc, #120]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033de:	4a1d      	ldr	r2, [pc, #116]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033f2:	4a18      	ldr	r2, [pc, #96]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033f8:	4b16      	ldr	r3, [pc, #88]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d114      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fd ff02 	bl	800120c <HAL_GetTick>
 8003408:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340a:	e00a      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340c:	f7fd fefe 	bl	800120c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e351      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003422:	4b0c      	ldr	r3, [pc, #48]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0ee      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003436:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800343a:	d111      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800343c:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003448:	4b04      	ldr	r3, [pc, #16]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800344a:	400b      	ands	r3, r1
 800344c:	4901      	ldr	r1, [pc, #4]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
 8003452:	e00b      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003454:	40023800 	.word	0x40023800
 8003458:	40007000 	.word	0x40007000
 800345c:	0ffffcff 	.word	0x0ffffcff
 8003460:	4bac      	ldr	r3, [pc, #688]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4aab      	ldr	r2, [pc, #684]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003466:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800346a:	6093      	str	r3, [r2, #8]
 800346c:	4ba9      	ldr	r3, [pc, #676]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800346e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003478:	49a6      	ldr	r1, [pc, #664]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800347a:	4313      	orrs	r3, r2
 800347c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	d010      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800348a:	4ba2      	ldr	r3, [pc, #648]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800348c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003490:	4aa0      	ldr	r2, [pc, #640]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003496:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800349a:	4b9e      	ldr	r3, [pc, #632]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a4:	499b      	ldr	r1, [pc, #620]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034b8:	4b96      	ldr	r3, [pc, #600]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034c6:	4993      	ldr	r1, [pc, #588]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034da:	4b8e      	ldr	r3, [pc, #568]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034e8:	498a      	ldr	r1, [pc, #552]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034fc:	4b85      	ldr	r3, [pc, #532]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003502:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800350a:	4982      	ldr	r1, [pc, #520]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800351e:	4b7d      	ldr	r3, [pc, #500]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003524:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352c:	4979      	ldr	r1, [pc, #484]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003540:	4b74      	ldr	r3, [pc, #464]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003546:	f023 0203 	bic.w	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	4971      	ldr	r1, [pc, #452]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003562:	4b6c      	ldr	r3, [pc, #432]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003568:	f023 020c 	bic.w	r2, r3, #12
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003570:	4968      	ldr	r1, [pc, #416]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003584:	4b63      	ldr	r3, [pc, #396]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003592:	4960      	ldr	r1, [pc, #384]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b4:	4957      	ldr	r1, [pc, #348]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035c8:	4b52      	ldr	r3, [pc, #328]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d6:	494f      	ldr	r1, [pc, #316]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f8:	4946      	ldr	r1, [pc, #280]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800360c:	4b41      	ldr	r3, [pc, #260]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003612:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361a:	493e      	ldr	r1, [pc, #248]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800362e:	4b39      	ldr	r3, [pc, #228]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003634:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363c:	4935      	ldr	r1, [pc, #212]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003650:	4b30      	ldr	r3, [pc, #192]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003656:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800365e:	492d      	ldr	r1, [pc, #180]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d011      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003672:	4b28      	ldr	r3, [pc, #160]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003678:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003680:	4924      	ldr	r1, [pc, #144]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800368c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003690:	d101      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003692:	2301      	movs	r3, #1
 8003694:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036a2:	2301      	movs	r3, #1
 80036a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036b2:	4b18      	ldr	r3, [pc, #96]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c0:	4914      	ldr	r1, [pc, #80]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00b      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036e4:	490b      	ldr	r1, [pc, #44]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00f      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80036f8:	4b06      	ldr	r3, [pc, #24]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003708:	4902      	ldr	r1, [pc, #8]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00b      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003724:	4b8a      	ldr	r3, [pc, #552]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800372a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003734:	4986      	ldr	r1, [pc, #536]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00b      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003748:	4b81      	ldr	r3, [pc, #516]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800374a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800374e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003758:	497d      	ldr	r1, [pc, #500]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d006      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80d6 	beq.w	8003920 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003774:	4b76      	ldr	r3, [pc, #472]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a75      	ldr	r2, [pc, #468]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800377a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800377e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003780:	f7fd fd44 	bl	800120c <HAL_GetTick>
 8003784:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003788:	f7fd fd40 	bl	800120c <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	@ 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e195      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800379a:	4b6d      	ldr	r3, [pc, #436]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d021      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d11d      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037ba:	4b65      	ldr	r3, [pc, #404]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037c8:	4b61      	ldr	r3, [pc, #388]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ce:	0e1b      	lsrs	r3, r3, #24
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	019a      	lsls	r2, r3, #6
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	431a      	orrs	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	061b      	lsls	r3, r3, #24
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	071b      	lsls	r3, r3, #28
 80037ee:	4958      	ldr	r1, [pc, #352]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800380a:	d00a      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003814:	2b00      	cmp	r3, #0
 8003816:	d02e      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003820:	d129      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003822:	4b4b      	ldr	r3, [pc, #300]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003830:	4b47      	ldr	r3, [pc, #284]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003836:	0f1b      	lsrs	r3, r3, #28
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	019a      	lsls	r2, r3, #6
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	041b      	lsls	r3, r3, #16
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	061b      	lsls	r3, r3, #24
 8003850:	431a      	orrs	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	071b      	lsls	r3, r3, #28
 8003856:	493e      	ldr	r1, [pc, #248]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800385e:	4b3c      	ldr	r3, [pc, #240]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003864:	f023 021f 	bic.w	r2, r3, #31
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	3b01      	subs	r3, #1
 800386e:	4938      	ldr	r1, [pc, #224]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01d      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003882:	4b33      	ldr	r3, [pc, #204]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003888:	0e1b      	lsrs	r3, r3, #24
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003890:	4b2f      	ldr	r3, [pc, #188]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003896:	0f1b      	lsrs	r3, r3, #28
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	019a      	lsls	r2, r3, #6
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	041b      	lsls	r3, r3, #16
 80038aa:	431a      	orrs	r2, r3
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	061b      	lsls	r3, r3, #24
 80038b0:	431a      	orrs	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	071b      	lsls	r3, r3, #28
 80038b6:	4926      	ldr	r1, [pc, #152]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d011      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	019a      	lsls	r2, r3, #6
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	071b      	lsls	r3, r3, #28
 80038e6:	491a      	ldr	r1, [pc, #104]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038ee:	4b18      	ldr	r3, [pc, #96]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a17      	ldr	r2, [pc, #92]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fa:	f7fd fc87 	bl	800120c <HAL_GetTick>
 80038fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003902:	f7fd fc83 	bl	800120c <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b64      	cmp	r3, #100	@ 0x64
 800390e:	d901      	bls.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e0d8      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003914:	4b0e      	ldr	r3, [pc, #56]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	2b01      	cmp	r3, #1
 8003924:	f040 80ce 	bne.w	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003928:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a08      	ldr	r2, [pc, #32]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800392e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003934:	f7fd fc6a 	bl	800120c <HAL_GetTick>
 8003938:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800393a:	e00b      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800393c:	f7fd fc66 	bl	800120c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b64      	cmp	r3, #100	@ 0x64
 8003948:	d904      	bls.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0bb      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003954:	4b5e      	ldr	r3, [pc, #376]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800395c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003960:	d0ec      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800397e:	2b00      	cmp	r3, #0
 8003980:	d02e      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d12a      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800398a:	4b51      	ldr	r3, [pc, #324]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003998:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399e:	0f1b      	lsrs	r3, r3, #28
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	019a      	lsls	r2, r3, #6
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	041b      	lsls	r3, r3, #16
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	061b      	lsls	r3, r3, #24
 80039b8:	431a      	orrs	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	071b      	lsls	r3, r3, #28
 80039be:	4944      	ldr	r1, [pc, #272]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039c6:	4b42      	ldr	r3, [pc, #264]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039cc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d4:	3b01      	subs	r3, #1
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	493d      	ldr	r1, [pc, #244]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d022      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039f4:	d11d      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039f6:	4b36      	ldr	r3, [pc, #216]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fc:	0e1b      	lsrs	r3, r3, #24
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a04:	4b32      	ldr	r3, [pc, #200]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0a:	0f1b      	lsrs	r3, r3, #28
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	019a      	lsls	r2, r3, #6
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	061b      	lsls	r3, r3, #24
 8003a24:	431a      	orrs	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	071b      	lsls	r3, r3, #28
 8003a2a:	4929      	ldr	r1, [pc, #164]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d028      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a3e:	4b24      	ldr	r3, [pc, #144]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a44:	0e1b      	lsrs	r3, r3, #24
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a4c:	4b20      	ldr	r3, [pc, #128]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a52:	0c1b      	lsrs	r3, r3, #16
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	019a      	lsls	r2, r3, #6
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	431a      	orrs	r2, r3
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	061b      	lsls	r3, r3, #24
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	071b      	lsls	r3, r3, #28
 8003a72:	4917      	ldr	r1, [pc, #92]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	4911      	ldr	r1, [pc, #68]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a90:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0e      	ldr	r2, [pc, #56]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9c:	f7fd fbb6 	bl	800120c <HAL_GetTick>
 8003aa0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003aa4:	f7fd fbb2 	bl	800120c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	@ 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e007      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ab6:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003abe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ac2:	d1ef      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800

08003ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e09d      	b.n	8003c22 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d108      	bne.n	8003b00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003af6:	d009      	beq.n	8003b0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	61da      	str	r2, [r3, #28]
 8003afe:	e005      	b.n	8003b0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fd f848 	bl	8000bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b4c:	d902      	bls.n	8003b54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	e002      	b.n	8003b5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003b62:	d007      	beq.n	8003b74 <HAL_SPI_Init+0xa0>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b6c:	d002      	beq.n	8003b74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb6:	ea42 0103 	orr.w	r1, r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	0c1b      	lsrs	r3, r3, #16
 8003bd0:	f003 0204 	and.w	r2, r3, #4
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003bf0:	ea42 0103 	orr.w	r1, r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	4613      	mov	r3, r2
 8003c38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_SPI_Transmit_DMA+0x20>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e0d4      	b.n	8003df6 <HAL_SPI_Transmit_DMA+0x1ca>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d002      	beq.n	8003c66 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
 8003c62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c64:	e0c2      	b.n	8003dec <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_SPI_Transmit_DMA+0x46>
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c76:	e0b9      	b.n	8003dec <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	88fa      	ldrh	r2, [r7, #6]
 8003c96:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cc2:	d10f      	bne.n	8003ce4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ce2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce8:	4a45      	ldr	r2, [pc, #276]	@ (8003e00 <HAL_SPI_Transmit_DMA+0x1d4>)
 8003cea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf0:	4a44      	ldr	r2, [pc, #272]	@ (8003e04 <HAL_SPI_Transmit_DMA+0x1d8>)
 8003cf2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf8:	4a43      	ldr	r2, [pc, #268]	@ (8003e08 <HAL_SPI_Transmit_DMA+0x1dc>)
 8003cfa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d00:	2200      	movs	r2, #0
 8003d02:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d12:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d1c:	d82d      	bhi.n	8003d7a <HAL_SPI_Transmit_DMA+0x14e>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d28:	d127      	bne.n	8003d7a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10f      	bne.n	8003d58 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d46:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d56:	e010      	b.n	8003d7a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d66:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3301      	adds	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d82:	4619      	mov	r1, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d90:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d92:	f7fd fc2b 	bl	80015ec <HAL_DMA_Start_IT>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da0:	f043 0210 	orr.w	r2, r3, #16
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003dac:	e01e      	b.n	8003dec <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db8:	2b40      	cmp	r3, #64	@ 0x40
 8003dba:	d007      	beq.n	8003dcc <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dca:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0220 	orr.w	r2, r2, #32
 8003dda:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0202 	orr.w	r2, r2, #2
 8003dea:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	08003edd 	.word	0x08003edd
 8003e04:	08003e35 	.word	0x08003e35
 8003e08:	08003ef9 	.word	0x08003ef9

08003e0c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e40:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e42:	f7fd f9e3 	bl	800120c <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e56:	d03b      	beq.n	8003ed0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0220 	bic.w	r2, r2, #32
 8003e66:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0202 	bic.w	r2, r2, #2
 8003e76:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	2164      	movs	r1, #100	@ 0x64
 8003e7c:	6978      	ldr	r0, [r7, #20]
 8003e7e:	f000 f979 	bl	8004174 <SPI_EndRxTxTransaction>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003ec8:	6978      	ldr	r0, [r7, #20]
 8003eca:	f7ff ffa9 	bl	8003e20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003ece:	e002      	b.n	8003ed6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003ed0:	6978      	ldr	r0, [r7, #20]
 8003ed2:	f7fc fb29 	bl	8000528 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7ff ff8e 	bl	8003e0c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0203 	bic.w	r2, r2, #3
 8003f14:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f1a:	f043 0210 	orr.w	r2, r3, #16
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f7ff ff78 	bl	8003e20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f48:	f7fd f960 	bl	800120c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	4413      	add	r3, r2
 8003f56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f58:	f7fd f958 	bl	800120c <HAL_GetTick>
 8003f5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f5e:	4b39      	ldr	r3, [pc, #228]	@ (8004044 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	015b      	lsls	r3, r3, #5
 8003f64:	0d1b      	lsrs	r3, r3, #20
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	fb02 f303 	mul.w	r3, r2, r3
 8003f6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f6e:	e054      	b.n	800401a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f76:	d050      	beq.n	800401a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f78:	f7fd f948 	bl	800120c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d902      	bls.n	8003f8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d13d      	bne.n	800400a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fa6:	d111      	bne.n	8003fcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fb0:	d004      	beq.n	8003fbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fba:	d107      	bne.n	8003fcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fd4:	d10f      	bne.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ff4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e017      	b.n	800403a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	3b01      	subs	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4013      	ands	r3, r2
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	bf0c      	ite	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	2300      	movne	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	429a      	cmp	r2, r3
 8004036:	d19b      	bne.n	8003f70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000000 	.word	0x20000000

08004048 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	@ 0x28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800405a:	f7fd f8d7 	bl	800120c <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	4413      	add	r3, r2
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800406a:	f7fd f8cf 	bl	800120c <HAL_GetTick>
 800406e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004078:	4b3d      	ldr	r3, [pc, #244]	@ (8004170 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	00da      	lsls	r2, r3, #3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	0d1b      	lsrs	r3, r3, #20
 8004088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004090:	e060      	b.n	8004154 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004098:	d107      	bne.n	80040aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d104      	bne.n	80040aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040b0:	d050      	beq.n	8004154 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040b2:	f7fd f8ab 	bl	800120c <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040be:	429a      	cmp	r2, r3
 80040c0:	d902      	bls.n	80040c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d13d      	bne.n	8004144 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040e0:	d111      	bne.n	8004106 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ea:	d004      	beq.n	80040f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f4:	d107      	bne.n	8004106 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004104:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800410e:	d10f      	bne.n	8004130 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800412e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e010      	b.n	8004166 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	3b01      	subs	r3, #1
 8004152:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4013      	ands	r3, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d196      	bne.n	8004092 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3728      	adds	r7, #40	@ 0x28
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000000 	.word	0x20000000

08004174 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2200      	movs	r2, #0
 8004188:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7ff ff5b 	bl	8004048 <SPI_WaitFifoStateUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d007      	beq.n	80041a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419c:	f043 0220 	orr.w	r2, r3, #32
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e046      	b.n	8004236 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041a8:	4b25      	ldr	r3, [pc, #148]	@ (8004240 <SPI_EndRxTxTransaction+0xcc>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a25      	ldr	r2, [pc, #148]	@ (8004244 <SPI_EndRxTxTransaction+0xd0>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	0d5b      	lsrs	r3, r3, #21
 80041b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041c6:	d112      	bne.n	80041ee <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2200      	movs	r2, #0
 80041d0:	2180      	movs	r1, #128	@ 0x80
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff feb0 	bl	8003f38 <SPI_WaitFlagStateUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d016      	beq.n	800420c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e023      	b.n	8004236 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004204:	2b80      	cmp	r3, #128	@ 0x80
 8004206:	d0f2      	beq.n	80041ee <SPI_EndRxTxTransaction+0x7a>
 8004208:	e000      	b.n	800420c <SPI_EndRxTxTransaction+0x98>
        break;
 800420a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2200      	movs	r2, #0
 8004214:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7ff ff15 	bl	8004048 <SPI_WaitFifoStateUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004228:	f043 0220 	orr.w	r2, r3, #32
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e000      	b.n	8004236 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000000 	.word	0x20000000
 8004244:	165e9f81 	.word	0x165e9f81

08004248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e040      	b.n	80042dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fc fd3a 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2224      	movs	r2, #36	@ 0x24
 8004274:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fa8c 	bl	80047ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f825 	bl	80042e4 <UART_SetConfig>
 800429a:	4603      	mov	r3, r0
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e01b      	b.n	80042dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fb0b 	bl	80048f0 <UART_CheckIdleState>
 80042da:	4603      	mov	r3, r0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4ba6      	ldr	r3, [pc, #664]	@ (80045a8 <UART_SetConfig+0x2c4>)
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	6979      	ldr	r1, [r7, #20]
 8004318:	430b      	orrs	r3, r1
 800431a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	430a      	orrs	r2, r1
 8004354:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a94      	ldr	r2, [pc, #592]	@ (80045ac <UART_SetConfig+0x2c8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d120      	bne.n	80043a2 <UART_SetConfig+0xbe>
 8004360:	4b93      	ldr	r3, [pc, #588]	@ (80045b0 <UART_SetConfig+0x2cc>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b03      	cmp	r3, #3
 800436c:	d816      	bhi.n	800439c <UART_SetConfig+0xb8>
 800436e:	a201      	add	r2, pc, #4	@ (adr r2, 8004374 <UART_SetConfig+0x90>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	08004385 	.word	0x08004385
 8004378:	08004391 	.word	0x08004391
 800437c:	0800438b 	.word	0x0800438b
 8004380:	08004397 	.word	0x08004397
 8004384:	2301      	movs	r3, #1
 8004386:	77fb      	strb	r3, [r7, #31]
 8004388:	e150      	b.n	800462c <UART_SetConfig+0x348>
 800438a:	2302      	movs	r3, #2
 800438c:	77fb      	strb	r3, [r7, #31]
 800438e:	e14d      	b.n	800462c <UART_SetConfig+0x348>
 8004390:	2304      	movs	r3, #4
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e14a      	b.n	800462c <UART_SetConfig+0x348>
 8004396:	2308      	movs	r3, #8
 8004398:	77fb      	strb	r3, [r7, #31]
 800439a:	e147      	b.n	800462c <UART_SetConfig+0x348>
 800439c:	2310      	movs	r3, #16
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e144      	b.n	800462c <UART_SetConfig+0x348>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a83      	ldr	r2, [pc, #524]	@ (80045b4 <UART_SetConfig+0x2d0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d132      	bne.n	8004412 <UART_SetConfig+0x12e>
 80043ac:	4b80      	ldr	r3, [pc, #512]	@ (80045b0 <UART_SetConfig+0x2cc>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b0c      	cmp	r3, #12
 80043b8:	d828      	bhi.n	800440c <UART_SetConfig+0x128>
 80043ba:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <UART_SetConfig+0xdc>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	0800440d 	.word	0x0800440d
 80043c8:	0800440d 	.word	0x0800440d
 80043cc:	0800440d 	.word	0x0800440d
 80043d0:	08004401 	.word	0x08004401
 80043d4:	0800440d 	.word	0x0800440d
 80043d8:	0800440d 	.word	0x0800440d
 80043dc:	0800440d 	.word	0x0800440d
 80043e0:	080043fb 	.word	0x080043fb
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	0800440d 	.word	0x0800440d
 80043f0:	08004407 	.word	0x08004407
 80043f4:	2300      	movs	r3, #0
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e118      	b.n	800462c <UART_SetConfig+0x348>
 80043fa:	2302      	movs	r3, #2
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e115      	b.n	800462c <UART_SetConfig+0x348>
 8004400:	2304      	movs	r3, #4
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e112      	b.n	800462c <UART_SetConfig+0x348>
 8004406:	2308      	movs	r3, #8
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e10f      	b.n	800462c <UART_SetConfig+0x348>
 800440c:	2310      	movs	r3, #16
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e10c      	b.n	800462c <UART_SetConfig+0x348>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a68      	ldr	r2, [pc, #416]	@ (80045b8 <UART_SetConfig+0x2d4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d120      	bne.n	800445e <UART_SetConfig+0x17a>
 800441c:	4b64      	ldr	r3, [pc, #400]	@ (80045b0 <UART_SetConfig+0x2cc>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004422:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004426:	2b30      	cmp	r3, #48	@ 0x30
 8004428:	d013      	beq.n	8004452 <UART_SetConfig+0x16e>
 800442a:	2b30      	cmp	r3, #48	@ 0x30
 800442c:	d814      	bhi.n	8004458 <UART_SetConfig+0x174>
 800442e:	2b20      	cmp	r3, #32
 8004430:	d009      	beq.n	8004446 <UART_SetConfig+0x162>
 8004432:	2b20      	cmp	r3, #32
 8004434:	d810      	bhi.n	8004458 <UART_SetConfig+0x174>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <UART_SetConfig+0x15c>
 800443a:	2b10      	cmp	r3, #16
 800443c:	d006      	beq.n	800444c <UART_SetConfig+0x168>
 800443e:	e00b      	b.n	8004458 <UART_SetConfig+0x174>
 8004440:	2300      	movs	r3, #0
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e0f2      	b.n	800462c <UART_SetConfig+0x348>
 8004446:	2302      	movs	r3, #2
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e0ef      	b.n	800462c <UART_SetConfig+0x348>
 800444c:	2304      	movs	r3, #4
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e0ec      	b.n	800462c <UART_SetConfig+0x348>
 8004452:	2308      	movs	r3, #8
 8004454:	77fb      	strb	r3, [r7, #31]
 8004456:	e0e9      	b.n	800462c <UART_SetConfig+0x348>
 8004458:	2310      	movs	r3, #16
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e0e6      	b.n	800462c <UART_SetConfig+0x348>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a56      	ldr	r2, [pc, #344]	@ (80045bc <UART_SetConfig+0x2d8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d120      	bne.n	80044aa <UART_SetConfig+0x1c6>
 8004468:	4b51      	ldr	r3, [pc, #324]	@ (80045b0 <UART_SetConfig+0x2cc>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004472:	2bc0      	cmp	r3, #192	@ 0xc0
 8004474:	d013      	beq.n	800449e <UART_SetConfig+0x1ba>
 8004476:	2bc0      	cmp	r3, #192	@ 0xc0
 8004478:	d814      	bhi.n	80044a4 <UART_SetConfig+0x1c0>
 800447a:	2b80      	cmp	r3, #128	@ 0x80
 800447c:	d009      	beq.n	8004492 <UART_SetConfig+0x1ae>
 800447e:	2b80      	cmp	r3, #128	@ 0x80
 8004480:	d810      	bhi.n	80044a4 <UART_SetConfig+0x1c0>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <UART_SetConfig+0x1a8>
 8004486:	2b40      	cmp	r3, #64	@ 0x40
 8004488:	d006      	beq.n	8004498 <UART_SetConfig+0x1b4>
 800448a:	e00b      	b.n	80044a4 <UART_SetConfig+0x1c0>
 800448c:	2300      	movs	r3, #0
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e0cc      	b.n	800462c <UART_SetConfig+0x348>
 8004492:	2302      	movs	r3, #2
 8004494:	77fb      	strb	r3, [r7, #31]
 8004496:	e0c9      	b.n	800462c <UART_SetConfig+0x348>
 8004498:	2304      	movs	r3, #4
 800449a:	77fb      	strb	r3, [r7, #31]
 800449c:	e0c6      	b.n	800462c <UART_SetConfig+0x348>
 800449e:	2308      	movs	r3, #8
 80044a0:	77fb      	strb	r3, [r7, #31]
 80044a2:	e0c3      	b.n	800462c <UART_SetConfig+0x348>
 80044a4:	2310      	movs	r3, #16
 80044a6:	77fb      	strb	r3, [r7, #31]
 80044a8:	e0c0      	b.n	800462c <UART_SetConfig+0x348>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a44      	ldr	r2, [pc, #272]	@ (80045c0 <UART_SetConfig+0x2dc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d125      	bne.n	8004500 <UART_SetConfig+0x21c>
 80044b4:	4b3e      	ldr	r3, [pc, #248]	@ (80045b0 <UART_SetConfig+0x2cc>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044c2:	d017      	beq.n	80044f4 <UART_SetConfig+0x210>
 80044c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044c8:	d817      	bhi.n	80044fa <UART_SetConfig+0x216>
 80044ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ce:	d00b      	beq.n	80044e8 <UART_SetConfig+0x204>
 80044d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044d4:	d811      	bhi.n	80044fa <UART_SetConfig+0x216>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <UART_SetConfig+0x1fe>
 80044da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044de:	d006      	beq.n	80044ee <UART_SetConfig+0x20a>
 80044e0:	e00b      	b.n	80044fa <UART_SetConfig+0x216>
 80044e2:	2300      	movs	r3, #0
 80044e4:	77fb      	strb	r3, [r7, #31]
 80044e6:	e0a1      	b.n	800462c <UART_SetConfig+0x348>
 80044e8:	2302      	movs	r3, #2
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e09e      	b.n	800462c <UART_SetConfig+0x348>
 80044ee:	2304      	movs	r3, #4
 80044f0:	77fb      	strb	r3, [r7, #31]
 80044f2:	e09b      	b.n	800462c <UART_SetConfig+0x348>
 80044f4:	2308      	movs	r3, #8
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e098      	b.n	800462c <UART_SetConfig+0x348>
 80044fa:	2310      	movs	r3, #16
 80044fc:	77fb      	strb	r3, [r7, #31]
 80044fe:	e095      	b.n	800462c <UART_SetConfig+0x348>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a2f      	ldr	r2, [pc, #188]	@ (80045c4 <UART_SetConfig+0x2e0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d125      	bne.n	8004556 <UART_SetConfig+0x272>
 800450a:	4b29      	ldr	r3, [pc, #164]	@ (80045b0 <UART_SetConfig+0x2cc>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004510:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004514:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004518:	d017      	beq.n	800454a <UART_SetConfig+0x266>
 800451a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800451e:	d817      	bhi.n	8004550 <UART_SetConfig+0x26c>
 8004520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004524:	d00b      	beq.n	800453e <UART_SetConfig+0x25a>
 8004526:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800452a:	d811      	bhi.n	8004550 <UART_SetConfig+0x26c>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <UART_SetConfig+0x254>
 8004530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004534:	d006      	beq.n	8004544 <UART_SetConfig+0x260>
 8004536:	e00b      	b.n	8004550 <UART_SetConfig+0x26c>
 8004538:	2301      	movs	r3, #1
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e076      	b.n	800462c <UART_SetConfig+0x348>
 800453e:	2302      	movs	r3, #2
 8004540:	77fb      	strb	r3, [r7, #31]
 8004542:	e073      	b.n	800462c <UART_SetConfig+0x348>
 8004544:	2304      	movs	r3, #4
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e070      	b.n	800462c <UART_SetConfig+0x348>
 800454a:	2308      	movs	r3, #8
 800454c:	77fb      	strb	r3, [r7, #31]
 800454e:	e06d      	b.n	800462c <UART_SetConfig+0x348>
 8004550:	2310      	movs	r3, #16
 8004552:	77fb      	strb	r3, [r7, #31]
 8004554:	e06a      	b.n	800462c <UART_SetConfig+0x348>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1b      	ldr	r2, [pc, #108]	@ (80045c8 <UART_SetConfig+0x2e4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d138      	bne.n	80045d2 <UART_SetConfig+0x2ee>
 8004560:	4b13      	ldr	r3, [pc, #76]	@ (80045b0 <UART_SetConfig+0x2cc>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004566:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800456a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800456e:	d017      	beq.n	80045a0 <UART_SetConfig+0x2bc>
 8004570:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004574:	d82a      	bhi.n	80045cc <UART_SetConfig+0x2e8>
 8004576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800457a:	d00b      	beq.n	8004594 <UART_SetConfig+0x2b0>
 800457c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004580:	d824      	bhi.n	80045cc <UART_SetConfig+0x2e8>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <UART_SetConfig+0x2aa>
 8004586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458a:	d006      	beq.n	800459a <UART_SetConfig+0x2b6>
 800458c:	e01e      	b.n	80045cc <UART_SetConfig+0x2e8>
 800458e:	2300      	movs	r3, #0
 8004590:	77fb      	strb	r3, [r7, #31]
 8004592:	e04b      	b.n	800462c <UART_SetConfig+0x348>
 8004594:	2302      	movs	r3, #2
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e048      	b.n	800462c <UART_SetConfig+0x348>
 800459a:	2304      	movs	r3, #4
 800459c:	77fb      	strb	r3, [r7, #31]
 800459e:	e045      	b.n	800462c <UART_SetConfig+0x348>
 80045a0:	2308      	movs	r3, #8
 80045a2:	77fb      	strb	r3, [r7, #31]
 80045a4:	e042      	b.n	800462c <UART_SetConfig+0x348>
 80045a6:	bf00      	nop
 80045a8:	efff69f3 	.word	0xefff69f3
 80045ac:	40011000 	.word	0x40011000
 80045b0:	40023800 	.word	0x40023800
 80045b4:	40004400 	.word	0x40004400
 80045b8:	40004800 	.word	0x40004800
 80045bc:	40004c00 	.word	0x40004c00
 80045c0:	40005000 	.word	0x40005000
 80045c4:	40011400 	.word	0x40011400
 80045c8:	40007800 	.word	0x40007800
 80045cc:	2310      	movs	r3, #16
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e02c      	b.n	800462c <UART_SetConfig+0x348>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a72      	ldr	r2, [pc, #456]	@ (80047a0 <UART_SetConfig+0x4bc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d125      	bne.n	8004628 <UART_SetConfig+0x344>
 80045dc:	4b71      	ldr	r3, [pc, #452]	@ (80047a4 <UART_SetConfig+0x4c0>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80045e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80045ea:	d017      	beq.n	800461c <UART_SetConfig+0x338>
 80045ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80045f0:	d817      	bhi.n	8004622 <UART_SetConfig+0x33e>
 80045f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045f6:	d00b      	beq.n	8004610 <UART_SetConfig+0x32c>
 80045f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045fc:	d811      	bhi.n	8004622 <UART_SetConfig+0x33e>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <UART_SetConfig+0x326>
 8004602:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004606:	d006      	beq.n	8004616 <UART_SetConfig+0x332>
 8004608:	e00b      	b.n	8004622 <UART_SetConfig+0x33e>
 800460a:	2300      	movs	r3, #0
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e00d      	b.n	800462c <UART_SetConfig+0x348>
 8004610:	2302      	movs	r3, #2
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e00a      	b.n	800462c <UART_SetConfig+0x348>
 8004616:	2304      	movs	r3, #4
 8004618:	77fb      	strb	r3, [r7, #31]
 800461a:	e007      	b.n	800462c <UART_SetConfig+0x348>
 800461c:	2308      	movs	r3, #8
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e004      	b.n	800462c <UART_SetConfig+0x348>
 8004622:	2310      	movs	r3, #16
 8004624:	77fb      	strb	r3, [r7, #31]
 8004626:	e001      	b.n	800462c <UART_SetConfig+0x348>
 8004628:	2310      	movs	r3, #16
 800462a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004634:	d15b      	bne.n	80046ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004636:	7ffb      	ldrb	r3, [r7, #31]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d828      	bhi.n	800468e <UART_SetConfig+0x3aa>
 800463c:	a201      	add	r2, pc, #4	@ (adr r2, 8004644 <UART_SetConfig+0x360>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004669 	.word	0x08004669
 8004648:	08004671 	.word	0x08004671
 800464c:	08004679 	.word	0x08004679
 8004650:	0800468f 	.word	0x0800468f
 8004654:	0800467f 	.word	0x0800467f
 8004658:	0800468f 	.word	0x0800468f
 800465c:	0800468f 	.word	0x0800468f
 8004660:	0800468f 	.word	0x0800468f
 8004664:	08004687 	.word	0x08004687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004668:	f7fe fde4 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 800466c:	61b8      	str	r0, [r7, #24]
        break;
 800466e:	e013      	b.n	8004698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004670:	f7fe fdf4 	bl	800325c <HAL_RCC_GetPCLK2Freq>
 8004674:	61b8      	str	r0, [r7, #24]
        break;
 8004676:	e00f      	b.n	8004698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004678:	4b4b      	ldr	r3, [pc, #300]	@ (80047a8 <UART_SetConfig+0x4c4>)
 800467a:	61bb      	str	r3, [r7, #24]
        break;
 800467c:	e00c      	b.n	8004698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467e:	f7fe fcc7 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 8004682:	61b8      	str	r0, [r7, #24]
        break;
 8004684:	e008      	b.n	8004698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800468a:	61bb      	str	r3, [r7, #24]
        break;
 800468c:	e004      	b.n	8004698 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	77bb      	strb	r3, [r7, #30]
        break;
 8004696:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d074      	beq.n	8004788 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	005a      	lsls	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	441a      	add	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	d916      	bls.n	80046e8 <UART_SetConfig+0x404>
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c0:	d212      	bcs.n	80046e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f023 030f 	bic.w	r3, r3, #15
 80046ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	89fb      	ldrh	r3, [r7, #14]
 80046da:	4313      	orrs	r3, r2
 80046dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	89fa      	ldrh	r2, [r7, #14]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	e04f      	b.n	8004788 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	77bb      	strb	r3, [r7, #30]
 80046ec:	e04c      	b.n	8004788 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046ee:	7ffb      	ldrb	r3, [r7, #31]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d828      	bhi.n	8004746 <UART_SetConfig+0x462>
 80046f4:	a201      	add	r2, pc, #4	@ (adr r2, 80046fc <UART_SetConfig+0x418>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004729 	.word	0x08004729
 8004704:	08004731 	.word	0x08004731
 8004708:	08004747 	.word	0x08004747
 800470c:	08004737 	.word	0x08004737
 8004710:	08004747 	.word	0x08004747
 8004714:	08004747 	.word	0x08004747
 8004718:	08004747 	.word	0x08004747
 800471c:	0800473f 	.word	0x0800473f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7fe fd88 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 8004724:	61b8      	str	r0, [r7, #24]
        break;
 8004726:	e013      	b.n	8004750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004728:	f7fe fd98 	bl	800325c <HAL_RCC_GetPCLK2Freq>
 800472c:	61b8      	str	r0, [r7, #24]
        break;
 800472e:	e00f      	b.n	8004750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004730:	4b1d      	ldr	r3, [pc, #116]	@ (80047a8 <UART_SetConfig+0x4c4>)
 8004732:	61bb      	str	r3, [r7, #24]
        break;
 8004734:	e00c      	b.n	8004750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004736:	f7fe fc6b 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 800473a:	61b8      	str	r0, [r7, #24]
        break;
 800473c:	e008      	b.n	8004750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004742:	61bb      	str	r3, [r7, #24]
        break;
 8004744:	e004      	b.n	8004750 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	77bb      	strb	r3, [r7, #30]
        break;
 800474e:	bf00      	nop
    }

    if (pclk != 0U)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d018      	beq.n	8004788 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	085a      	lsrs	r2, r3, #1
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	441a      	add	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b0f      	cmp	r3, #15
 800476e:	d909      	bls.n	8004784 <UART_SetConfig+0x4a0>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004776:	d205      	bcs.n	8004784 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	b29a      	uxth	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60da      	str	r2, [r3, #12]
 8004782:	e001      	b.n	8004788 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004794:	7fbb      	ldrb	r3, [r7, #30]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40007c00 	.word	0x40007c00
 80047a4:	40023800 	.word	0x40023800
 80047a8:	00f42400 	.word	0x00f42400

080047ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01a      	beq.n	80048c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048aa:	d10a      	bne.n	80048c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	605a      	str	r2, [r3, #4]
  }
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b098      	sub	sp, #96	@ 0x60
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004900:	f7fc fc84 	bl	800120c <HAL_GetTick>
 8004904:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b08      	cmp	r3, #8
 8004912:	d12e      	bne.n	8004972 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004914:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800491c:	2200      	movs	r2, #0
 800491e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f88c 	bl	8004a40 <UART_WaitOnFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d021      	beq.n	8004972 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800493c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800493e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004942:	653b      	str	r3, [r7, #80]	@ 0x50
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800494c:	647b      	str	r3, [r7, #68]	@ 0x44
 800494e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800495a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e6      	bne.n	800492e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e062      	b.n	8004a38 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b04      	cmp	r3, #4
 800497e:	d149      	bne.n	8004a14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004980:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004988:	2200      	movs	r2, #0
 800498a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f856 	bl	8004a40 <UART_WaitOnFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d03c      	beq.n	8004a14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	623b      	str	r3, [r7, #32]
   return(result);
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e6      	bne.n	800499a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3308      	adds	r3, #8
 80049d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	60fb      	str	r3, [r7, #12]
   return(result);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3308      	adds	r3, #8
 80049ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049ec:	61fa      	str	r2, [r7, #28]
 80049ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	69b9      	ldr	r1, [r7, #24]
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	617b      	str	r3, [r7, #20]
   return(result);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e5      	bne.n	80049cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e011      	b.n	8004a38 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3758      	adds	r7, #88	@ 0x58
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a50:	e04f      	b.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a58:	d04b      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5a:	f7fc fbd7 	bl	800120c <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d302      	bcc.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e04e      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d037      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b80      	cmp	r3, #128	@ 0x80
 8004a86:	d034      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b40      	cmp	r3, #64	@ 0x40
 8004a8c:	d031      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d110      	bne.n	8004abe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f838 	bl	8004b1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2208      	movs	r2, #8
 8004aae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e029      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004acc:	d111      	bne.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ad6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f81e 	bl	8004b1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e00f      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4013      	ands	r3, r2
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	bf0c      	ite	eq
 8004b02:	2301      	moveq	r3, #1
 8004b04:	2300      	movne	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d0a0      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b095      	sub	sp, #84	@ 0x54
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b40:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e6      	bne.n	8004b22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3308      	adds	r3, #8
 8004b5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	e853 3f00 	ldrex	r3, [r3]
 8004b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f023 0301 	bic.w	r3, r3, #1
 8004b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3308      	adds	r3, #8
 8004b72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e5      	bne.n	8004b54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d118      	bne.n	8004bc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f023 0310 	bic.w	r3, r3, #16
 8004ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6979      	ldr	r1, [r7, #20]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	613b      	str	r3, [r7, #16]
   return(result);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e6      	bne.n	8004b90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004bd6:	bf00      	nop
 8004bd8:	3754      	adds	r7, #84	@ 0x54
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
	...

08004be4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004be4:	b084      	sub	sp, #16
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	f107 001c 	add.w	r0, r7, #28
 8004bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bf6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d121      	bne.n	8004c42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	4b21      	ldr	r3, [pc, #132]	@ (8004c94 <USB_CoreInit+0xb0>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d105      	bne.n	8004c36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fa92 	bl	8005160 <USB_CoreReset>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	73fb      	strb	r3, [r7, #15]
 8004c40:	e010      	b.n	8004c64 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fa86 	bl	8005160 <USB_CoreReset>
 8004c54:	4603      	mov	r3, r0
 8004c56:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004c64:	7fbb      	ldrb	r3, [r7, #30]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d10b      	bne.n	8004c82 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f043 0206 	orr.w	r2, r3, #6
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f043 0220 	orr.w	r2, r3, #32
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c8e:	b004      	add	sp, #16
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	ffbdffbf 	.word	0xffbdffbf

08004c98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f023 0201 	bic.w	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d115      	bne.n	8004d08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ce8:	200a      	movs	r0, #10
 8004cea:	f7fc fa9b 	bl	8001224 <HAL_Delay>
      ms += 10U;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	330a      	adds	r3, #10
 8004cf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fa25 	bl	8005144 <USB_GetMode>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d01e      	beq.n	8004d3e <USB_SetCurrentMode+0x84>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d04:	d9f0      	bls.n	8004ce8 <USB_SetCurrentMode+0x2e>
 8004d06:	e01a      	b.n	8004d3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d115      	bne.n	8004d3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d1a:	200a      	movs	r0, #10
 8004d1c:	f7fc fa82 	bl	8001224 <HAL_Delay>
      ms += 10U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	330a      	adds	r3, #10
 8004d24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fa0c 	bl	8005144 <USB_GetMode>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <USB_SetCurrentMode+0x84>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d36:	d9f0      	bls.n	8004d1a <USB_SetCurrentMode+0x60>
 8004d38:	e001      	b.n	8004d3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e005      	b.n	8004d4a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2bc8      	cmp	r3, #200	@ 0xc8
 8004d42:	d101      	bne.n	8004d48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e000      	b.n	8004d4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d54:	b084      	sub	sp, #16
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b086      	sub	sp, #24
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004d62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	e009      	b.n	8004d88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	3340      	adds	r3, #64	@ 0x40
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	2200      	movs	r2, #0
 8004d80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	3301      	adds	r3, #1
 8004d86:	613b      	str	r3, [r7, #16]
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b0e      	cmp	r3, #14
 8004d8c:	d9f2      	bls.n	8004d74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d11c      	bne.n	8004dd0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004da4:	f043 0302 	orr.w	r3, r3, #2
 8004da8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	e005      	b.n	8004ddc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004de2:	461a      	mov	r2, r3
 8004de4:	2300      	movs	r3, #0
 8004de6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004de8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d10d      	bne.n	8004e0c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004df0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d104      	bne.n	8004e02 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004df8:	2100      	movs	r1, #0
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f968 	bl	80050d0 <USB_SetDevSpeed>
 8004e00:	e008      	b.n	8004e14 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e02:	2101      	movs	r1, #1
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f963 	bl	80050d0 <USB_SetDevSpeed>
 8004e0a:	e003      	b.n	8004e14 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e0c:	2103      	movs	r1, #3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f95e 	bl	80050d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e14:	2110      	movs	r1, #16
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f8fa 	bl	8005010 <USB_FlushTxFifo>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f924 	bl	8005074 <USB_FlushRxFifo>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	2300      	movs	r3, #0
 8004e40:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e54:	461a      	mov	r2, r3
 8004e56:	2300      	movs	r3, #0
 8004e58:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	e043      	b.n	8004ee8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e76:	d118      	bne.n	8004eaa <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10a      	bne.n	8004e94 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e013      	b.n	8004ebc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	e008      	b.n	8004ebc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec8:	461a      	mov	r2, r3
 8004eca:	2300      	movs	r3, #0
 8004ecc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eda:	461a      	mov	r2, r3
 8004edc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ee0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004eec:	461a      	mov	r2, r3
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d3b5      	bcc.n	8004e60 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	e043      	b.n	8004f82 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f10:	d118      	bne.n	8004f44 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f24:	461a      	mov	r2, r3
 8004f26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	e013      	b.n	8004f56 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	e008      	b.n	8004f56 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f50:	461a      	mov	r2, r3
 8004f52:	2300      	movs	r3, #0
 8004f54:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f62:	461a      	mov	r2, r3
 8004f64:	2300      	movs	r3, #0
 8004f66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f74:	461a      	mov	r2, r3
 8004f76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f86:	461a      	mov	r2, r3
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d3b5      	bcc.n	8004efa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fa0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004fae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d105      	bne.n	8004fc4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f043 0210 	orr.w	r2, r3, #16
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699a      	ldr	r2, [r3, #24]
 8004fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8005008 <USB_DevInit+0x2b4>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fd0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f043 0208 	orr.w	r2, r3, #8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fe4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699a      	ldr	r2, [r3, #24]
 8004ff0:	4b06      	ldr	r3, [pc, #24]	@ (800500c <USB_DevInit+0x2b8>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005004:	b004      	add	sp, #16
 8005006:	4770      	bx	lr
 8005008:	803c3800 	.word	0x803c3800
 800500c:	40000004 	.word	0x40000004

08005010 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3301      	adds	r3, #1
 8005022:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800502a:	d901      	bls.n	8005030 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e01b      	b.n	8005068 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	daf2      	bge.n	800501e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	019b      	lsls	r3, r3, #6
 8005040:	f043 0220 	orr.w	r2, r3, #32
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3301      	adds	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005054:	d901      	bls.n	800505a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e006      	b.n	8005068 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b20      	cmp	r3, #32
 8005064:	d0f0      	beq.n	8005048 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3301      	adds	r3, #1
 8005084:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800508c:	d901      	bls.n	8005092 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e018      	b.n	80050c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	daf2      	bge.n	8005080 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2210      	movs	r2, #16
 80050a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3301      	adds	r3, #1
 80050a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050b0:	d901      	bls.n	80050b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e006      	b.n	80050c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b10      	cmp	r3, #16
 80050c0:	d0f0      	beq.n	80050a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	68f9      	ldr	r1, [r7, #12]
 80050ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050f0:	4313      	orrs	r3, r2
 80050f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800511c:	f023 0303 	bic.w	r3, r3, #3
 8005120:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005130:	f043 0302 	orr.w	r3, r3, #2
 8005134:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f003 0301 	and.w	r3, r3, #1
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3301      	adds	r3, #1
 8005170:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005178:	d901      	bls.n	800517e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e01b      	b.n	80051b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	daf2      	bge.n	800516c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f043 0201 	orr.w	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3301      	adds	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051a2:	d901      	bls.n	80051a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e006      	b.n	80051b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d0f0      	beq.n	8005196 <USB_CoreReset+0x36>

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <memset>:
 80051c2:	4402      	add	r2, r0
 80051c4:	4603      	mov	r3, r0
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d100      	bne.n	80051cc <memset+0xa>
 80051ca:	4770      	bx	lr
 80051cc:	f803 1b01 	strb.w	r1, [r3], #1
 80051d0:	e7f9      	b.n	80051c6 <memset+0x4>
	...

080051d4 <__libc_init_array>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	4d0d      	ldr	r5, [pc, #52]	@ (800520c <__libc_init_array+0x38>)
 80051d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005210 <__libc_init_array+0x3c>)
 80051da:	1b64      	subs	r4, r4, r5
 80051dc:	10a4      	asrs	r4, r4, #2
 80051de:	2600      	movs	r6, #0
 80051e0:	42a6      	cmp	r6, r4
 80051e2:	d109      	bne.n	80051f8 <__libc_init_array+0x24>
 80051e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005214 <__libc_init_array+0x40>)
 80051e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005218 <__libc_init_array+0x44>)
 80051e8:	f000 f818 	bl	800521c <_init>
 80051ec:	1b64      	subs	r4, r4, r5
 80051ee:	10a4      	asrs	r4, r4, #2
 80051f0:	2600      	movs	r6, #0
 80051f2:	42a6      	cmp	r6, r4
 80051f4:	d105      	bne.n	8005202 <__libc_init_array+0x2e>
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
 80051f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fc:	4798      	blx	r3
 80051fe:	3601      	adds	r6, #1
 8005200:	e7ee      	b.n	80051e0 <__libc_init_array+0xc>
 8005202:	f855 3b04 	ldr.w	r3, [r5], #4
 8005206:	4798      	blx	r3
 8005208:	3601      	adds	r6, #1
 800520a:	e7f2      	b.n	80051f2 <__libc_init_array+0x1e>
 800520c:	0800525c 	.word	0x0800525c
 8005210:	0800525c 	.word	0x0800525c
 8005214:	0800525c 	.word	0x0800525c
 8005218:	08005260 	.word	0x08005260

0800521c <_init>:
 800521c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521e:	bf00      	nop
 8005220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005222:	bc08      	pop	{r3}
 8005224:	469e      	mov	lr, r3
 8005226:	4770      	bx	lr

08005228 <_fini>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	bf00      	nop
 800522c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522e:	bc08      	pop	{r3}
 8005230:	469e      	mov	lr, r3
 8005232:	4770      	bx	lr
